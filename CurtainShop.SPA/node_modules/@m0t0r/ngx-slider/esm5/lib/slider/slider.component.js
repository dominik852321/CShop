/**
 * @fileoverview added by tsickle
 * Generated from: lib/slider/slider.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __extends, __values } from "tslib";
import { Component, ViewChild, HostBinding, HostListener, Input, ElementRef, Renderer2, EventEmitter, Output, ContentChild, TemplateRef, ChangeDetectorRef, forwardRef, NgZone } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { Subject } from 'rxjs';
import { distinctUntilChanged, filter, throttleTime, tap } from 'rxjs/operators';
import detectPassiveEvents from 'detect-passive-events';
import { Options, LabelType } from '../interfaces/options';
import { PointerType } from '../interfaces/pointer-type';
import { ChangeContext } from '../interfaces/change-context';
import { ValueHelper } from '../helpers/value-helper';
import { CompatibilityHelper } from '../helpers/compatibility-helper';
import { MathHelper } from '../helpers/math-helper';
import { EventListenerHelper } from '../helpers/event-listener-helper';
import { SliderElementDirective } from '../directives/slider-element.directive';
import { SliderHandleDirective } from '../directives/slider-handle.directive';
import { SliderLabelDirective } from '../directives/slider-label.directive';
var Tick = /** @class */ (function () {
    function Tick() {
        this.selected = false;
        this.style = {};
        this.tooltip = null;
        this.tooltipPlacement = null;
        this.value = null;
        this.valueTooltip = null;
        this.valueTooltipPlacement = null;
        this.legend = null;
    }
    return Tick;
}());
export { Tick };
if (false) {
    /** @type {?} */
    Tick.prototype.selected;
    /** @type {?} */
    Tick.prototype.style;
    /** @type {?} */
    Tick.prototype.tooltip;
    /** @type {?} */
    Tick.prototype.tooltipPlacement;
    /** @type {?} */
    Tick.prototype.value;
    /** @type {?} */
    Tick.prototype.valueTooltip;
    /** @type {?} */
    Tick.prototype.valueTooltipPlacement;
    /** @type {?} */
    Tick.prototype.legend;
}
var Dragging = /** @class */ (function () {
    function Dragging() {
        this.active = false;
        this.value = 0;
        this.difference = 0;
        this.position = 0;
        this.lowLimit = 0;
        this.highLimit = 0;
    }
    return Dragging;
}());
if (false) {
    /** @type {?} */
    Dragging.prototype.active;
    /** @type {?} */
    Dragging.prototype.value;
    /** @type {?} */
    Dragging.prototype.difference;
    /** @type {?} */
    Dragging.prototype.position;
    /** @type {?} */
    Dragging.prototype.lowLimit;
    /** @type {?} */
    Dragging.prototype.highLimit;
}
var ModelValues = /** @class */ (function () {
    function ModelValues() {
    }
    /**
     * @param {?=} x
     * @param {?=} y
     * @return {?}
     */
    ModelValues.compare = /**
     * @param {?=} x
     * @param {?=} y
     * @return {?}
     */
    function (x, y) {
        if (ValueHelper.isNullOrUndefined(x) && ValueHelper.isNullOrUndefined(y)) {
            return false;
        }
        if (ValueHelper.isNullOrUndefined(x) !== ValueHelper.isNullOrUndefined(y)) {
            return false;
        }
        return x.value === y.value && x.highValue === y.highValue;
    };
    return ModelValues;
}());
if (false) {
    /** @type {?} */
    ModelValues.prototype.value;
    /** @type {?} */
    ModelValues.prototype.highValue;
}
var ModelChange = /** @class */ (function (_super) {
    __extends(ModelChange, _super);
    function ModelChange() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?=} x
     * @param {?=} y
     * @return {?}
     */
    ModelChange.compare = /**
     * @param {?=} x
     * @param {?=} y
     * @return {?}
     */
    function (x, y) {
        if (ValueHelper.isNullOrUndefined(x) && ValueHelper.isNullOrUndefined(y)) {
            return false;
        }
        if (ValueHelper.isNullOrUndefined(x) !== ValueHelper.isNullOrUndefined(y)) {
            return false;
        }
        return x.value === y.value &&
            x.highValue === y.highValue &&
            x.forceChange === y.forceChange;
    };
    return ModelChange;
}(ModelValues));
if (false) {
    /** @type {?} */
    ModelChange.prototype.forceChange;
}
var InputModelChange = /** @class */ (function (_super) {
    __extends(InputModelChange, _super);
    function InputModelChange() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return InputModelChange;
}(ModelChange));
if (false) {
    /** @type {?} */
    InputModelChange.prototype.internalChange;
}
var OutputModelChange = /** @class */ (function (_super) {
    __extends(OutputModelChange, _super);
    function OutputModelChange() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return OutputModelChange;
}(ModelChange));
if (false) {
    /** @type {?} */
    OutputModelChange.prototype.userEventInitiated;
}
/** @type {?} */
var NGX_SLIDER_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    /* tslint:disable-next-line: no-use-before-declare */
    useExisting: forwardRef((/**
     * @return {?}
     */
    function () { return SliderComponent; })),
    multi: true,
};
var SliderComponent = /** @class */ (function () {
    function SliderComponent(renderer, elementRef, changeDetectionRef, zone) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.changeDetectionRef = changeDetectionRef;
        this.zone = zone;
        // Model for low value of slider. For simple slider, this is the only input. For range slider, this is the low value.
        this.value = null;
        // Output for low value slider to support two-way bindings
        this.valueChange = new EventEmitter();
        // Model for high value of slider. Not used in simple slider. For range slider, this is the high value.
        this.highValue = null;
        // Output for high value slider to support two-way bindings
        this.highValueChange = new EventEmitter();
        // An object with all the other options of the slider.
        // Each option can be updated at runtime and the slider will automatically be re-rendered.
        this.options = new Options();
        // Event emitted when user starts interaction with the slider
        this.userChangeStart = new EventEmitter();
        // Event emitted on each change coming from user interaction
        this.userChange = new EventEmitter();
        // Event emitted when user finishes interaction with the slider
        this.userChangeEnd = new EventEmitter();
        // Set to true if init method already executed
        this.initHasRun = false;
        // Changes in model inputs are passed through this subject
        // These are all changes coming in from outside the component through input bindings or reactive form inputs
        this.inputModelChangeSubject = new Subject();
        this.inputModelChangeSubscription = null;
        // Changes to model outputs are passed through this subject
        // These are all changes that need to be communicated to output emitters and registered callbacks
        this.outputModelChangeSubject = new Subject();
        this.outputModelChangeSubscription = null;
        // Low value synced to model low value
        this.viewLowValue = null;
        // High value synced to model high value
        this.viewHighValue = null;
        // Options synced to model options, based on defaults
        this.viewOptions = new Options();
        // Half of the width or height of the slider handles
        this.handleHalfDimension = 0;
        // Maximum position the slider handle can have
        this.maxHandlePosition = 0;
        // Which handle is currently tracked for move events
        this.currentTrackingPointer = null;
        // Internal variable to keep track of the focus element
        this.currentFocusPointer = null;
        // Used to call onStart on the first keydown event
        this.firstKeyDown = false;
        // Current touch id of touch event being handled
        this.touchId = null;
        // Values recorded when first dragging the bar
        this.dragging = new Dragging();
        // Host element class bindings
        this.sliderElementVerticalClass = false;
        this.sliderElementAnimateClass = false;
        this.sliderElementDisabledAttr = null;
        // CSS styles and class flags
        this.barStyle = {};
        this.minPointerStyle = {};
        this.maxPointerStyle = {};
        this.fullBarTransparentClass = false;
        this.selectionBarDraggableClass = false;
        this.ticksUnderValuesClass = false;
        /* If tickStep is set or ticksArray is specified.
             In this case, ticks values should be displayed below the slider. */
        this.intermediateTicks = false;
        // Ticks array as displayed in view
        this.ticks = [];
        // Event listeners
        this.eventListenerHelper = null;
        this.onMoveEventListener = null;
        this.onEndEventListener = null;
        // Observer for slider element resize events
        this.resizeObserver = null;
        // Callbacks for reactive forms support
        this.onTouchedCallback = null;
        this.onChangeCallback = null;
        this.eventListenerHelper = new EventListenerHelper(this.renderer);
    }
    Object.defineProperty(SliderComponent.prototype, "manualRefresh", {
        // Input event that triggers slider refresh (re-positioning of slider elements)
        set: 
        // Input event that triggers slider refresh (re-positioning of slider elements)
        /**
         * @param {?} manualRefresh
         * @return {?}
         */
        function (manualRefresh) {
            var _this = this;
            this.unsubscribeManualRefresh();
            this.manualRefreshSubscription = manualRefresh.subscribe((/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () { return _this.calculateViewDimensionsAndDetectChanges(); }));
            }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "triggerFocus", {
        // Input event that triggers setting focus on given slider handle
        set: 
        // Input event that triggers setting focus on given slider handle
        /**
         * @param {?} triggerFocus
         * @return {?}
         */
        function (triggerFocus) {
            var _this = this;
            this.unsubscribeTriggerFocus();
            this.triggerFocusSubscription = triggerFocus.subscribe((/**
             * @param {?} pointerType
             * @return {?}
             */
            function (pointerType) {
                _this.focusPointer(pointerType);
            }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "range", {
        // Slider type, true means range slider
        get: 
        // Slider type, true means range slider
        /**
         * @return {?}
         */
        function () {
            return !ValueHelper.isNullOrUndefined(this.value) && !ValueHelper.isNullOrUndefined(this.highValue);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderComponent.prototype, "showTicks", {
        // Whether to show/hide ticks
        get: 
        // Whether to show/hide ticks
        /**
         * @return {?}
         */
        function () {
            return this.viewOptions.showTicks;
        },
        enumerable: true,
        configurable: true
    });
    // OnInit interface
    // OnInit interface
    /**
     * @return {?}
     */
    SliderComponent.prototype.ngOnInit = 
    // OnInit interface
    /**
     * @return {?}
     */
    function () {
        this.viewOptions = new Options();
        Object.assign(this.viewOptions, this.options);
        // We need to run these two things first, before the rest of the init in ngAfterViewInit(),
        // because these two settings are set through @HostBinding and Angular change detection
        // mechanism doesn't like them changing in ngAfterViewInit()
        this.updateDisabledState();
        this.updateVerticalState();
    };
    // AfterViewInit interface
    // AfterViewInit interface
    /**
     * @return {?}
     */
    SliderComponent.prototype.ngAfterViewInit = 
    // AfterViewInit interface
    /**
     * @return {?}
     */
    function () {
        this.applyOptions();
        this.subscribeInputModelChangeSubject(this.viewOptions.inputEventsInterval);
        this.subscribeOutputModelChangeSubject(this.viewOptions.outputEventsInterval);
        // Once we apply options, we need to normalise model values for the first time
        this.renormaliseModelValues();
        this.viewLowValue = this.modelValueToViewValue(this.value);
        if (this.range) {
            this.viewHighValue = this.modelValueToViewValue(this.highValue);
        }
        else {
            this.viewHighValue = null;
        }
        this.updateVerticalState(); // need to run this again to cover changes to slider elements
        this.manageElementsStyle();
        this.updateDisabledState();
        this.calculateViewDimensions();
        this.addAccessibility();
        this.updateCeilLabel();
        this.updateFloorLabel();
        this.initHandles();
        this.manageEventsBindings();
        this.subscribeResizeObserver();
        this.initHasRun = true;
        // Run change detection manually to resolve some issues when init procedure changes values used in the view
        this.changeDetectionRef.detectChanges();
    };
    // OnChanges interface
    // OnChanges interface
    /**
     * @param {?} changes
     * @return {?}
     */
    SliderComponent.prototype.ngOnChanges = 
    // OnChanges interface
    /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        // Always apply options first
        if (!ValueHelper.isNullOrUndefined(changes.options)) {
            this.onChangeOptions();
        }
        // Then value changes
        if (!ValueHelper.isNullOrUndefined(changes.value) ||
            !ValueHelper.isNullOrUndefined(changes.highValue)) {
            this.inputModelChangeSubject.next({
                value: this.value,
                highValue: this.highValue,
                forceChange: false,
                internalChange: false
            });
        }
    };
    // OnDestroy interface
    // OnDestroy interface
    /**
     * @return {?}
     */
    SliderComponent.prototype.ngOnDestroy = 
    // OnDestroy interface
    /**
     * @return {?}
     */
    function () {
        this.unbindEvents();
        this.unsubscribeResizeObserver();
        this.unsubscribeInputModelChangeSubject();
        this.unsubscribeOutputModelChangeSubject();
        this.unsubscribeManualRefresh();
        this.unsubscribeTriggerFocus();
    };
    // ControlValueAccessor interface
    // ControlValueAccessor interface
    /**
     * @param {?} obj
     * @return {?}
     */
    SliderComponent.prototype.writeValue = 
    // ControlValueAccessor interface
    /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        if (obj instanceof Array) {
            this.value = obj[0];
            this.highValue = obj[1];
        }
        else {
            this.value = obj;
        }
        // ngOnChanges() is not called in this instance, so we need to communicate the change manually
        this.inputModelChangeSubject.next({
            value: this.value,
            highValue: this.highValue,
            forceChange: false,
            internalChange: false
        });
    };
    // ControlValueAccessor interface
    // ControlValueAccessor interface
    /**
     * @param {?} onChangeCallback
     * @return {?}
     */
    SliderComponent.prototype.registerOnChange = 
    // ControlValueAccessor interface
    /**
     * @param {?} onChangeCallback
     * @return {?}
     */
    function (onChangeCallback) {
        this.onChangeCallback = onChangeCallback;
    };
    // ControlValueAccessor interface
    // ControlValueAccessor interface
    /**
     * @param {?} onTouchedCallback
     * @return {?}
     */
    SliderComponent.prototype.registerOnTouched = 
    // ControlValueAccessor interface
    /**
     * @param {?} onTouchedCallback
     * @return {?}
     */
    function (onTouchedCallback) {
        this.onTouchedCallback = onTouchedCallback;
    };
    // ControlValueAccessor interface
    // ControlValueAccessor interface
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    SliderComponent.prototype.setDisabledState = 
    // ControlValueAccessor interface
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.viewOptions.disabled = isDisabled;
        this.updateDisabledState();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SliderComponent.prototype.onResize = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.calculateViewDimensionsAndDetectChanges();
    };
    /**
     * @private
     * @param {?=} interval
     * @return {?}
     */
    SliderComponent.prototype.subscribeInputModelChangeSubject = /**
     * @private
     * @param {?=} interval
     * @return {?}
     */
    function (interval) {
        var _this = this;
        this.inputModelChangeSubscription = this.inputModelChangeSubject
            .pipe(distinctUntilChanged(ModelChange.compare), 
        // Hack to reset the status of the distinctUntilChanged() - if a "fake" event comes through with forceChange=true,
        // we forcefully by-pass distinctUntilChanged(), but otherwise drop the event
        filter((/**
         * @param {?} modelChange
         * @return {?}
         */
        function (modelChange) { return !modelChange.forceChange && !modelChange.internalChange; })), (!ValueHelper.isNullOrUndefined(interval))
            ? throttleTime(interval, undefined, { leading: true, trailing: true })
            : tap((/**
             * @return {?}
             */
            function () { })) // no-op
        )
            .subscribe((/**
         * @param {?} modelChange
         * @return {?}
         */
        function (modelChange) { return _this.applyInputModelChange(modelChange); }));
    };
    /**
     * @private
     * @param {?=} interval
     * @return {?}
     */
    SliderComponent.prototype.subscribeOutputModelChangeSubject = /**
     * @private
     * @param {?=} interval
     * @return {?}
     */
    function (interval) {
        var _this = this;
        this.outputModelChangeSubscription = this.outputModelChangeSubject
            .pipe(distinctUntilChanged(ModelChange.compare), (!ValueHelper.isNullOrUndefined(interval))
            ? throttleTime(interval, undefined, { leading: true, trailing: true })
            : tap((/**
             * @return {?}
             */
            function () { })) // no-op
        )
            .subscribe((/**
         * @param {?} modelChange
         * @return {?}
         */
        function (modelChange) { return _this.publishOutputModelChange(modelChange); }));
    };
    /**
     * @private
     * @return {?}
     */
    SliderComponent.prototype.subscribeResizeObserver = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (CompatibilityHelper.isResizeObserverAvailable()) {
            this.resizeObserver = new ResizeObserver((/**
             * @return {?}
             */
            function () { return _this.calculateViewDimensionsAndDetectChanges(); }));
            this.resizeObserver.observe(this.elementRef.nativeElement);
        }
    };
    /**
     * @private
     * @return {?}
     */
    SliderComponent.prototype.unsubscribeResizeObserver = /**
     * @private
     * @return {?}
     */
    function () {
        if (CompatibilityHelper.isResizeObserverAvailable() && this.resizeObserver !== null) {
            this.resizeObserver.disconnect();
            this.resizeObserver = null;
        }
    };
    /**
     * @private
     * @return {?}
     */
    SliderComponent.prototype.unsubscribeOnMove = /**
     * @private
     * @return {?}
     */
    function () {
        if (!ValueHelper.isNullOrUndefined(this.onMoveEventListener)) {
            this.eventListenerHelper.detachEventListener(this.onMoveEventListener);
            this.onMoveEventListener = null;
        }
    };
    /**
     * @private
     * @return {?}
     */
    SliderComponent.prototype.unsubscribeOnEnd = /**
     * @private
     * @return {?}
     */
    function () {
        if (!ValueHelper.isNullOrUndefined(this.onEndEventListener)) {
            this.eventListenerHelper.detachEventListener(this.onEndEventListener);
            this.onEndEventListener = null;
        }
    };
    /**
     * @private
     * @return {?}
     */
    SliderComponent.prototype.unsubscribeInputModelChangeSubject = /**
     * @private
     * @return {?}
     */
    function () {
        if (!ValueHelper.isNullOrUndefined(this.inputModelChangeSubscription)) {
            this.inputModelChangeSubscription.unsubscribe();
            this.inputModelChangeSubscription = null;
        }
    };
    /**
     * @private
     * @return {?}
     */
    SliderComponent.prototype.unsubscribeOutputModelChangeSubject = /**
     * @private
     * @return {?}
     */
    function () {
        if (!ValueHelper.isNullOrUndefined(this.outputModelChangeSubscription)) {
            this.outputModelChangeSubscription.unsubscribe();
            this.outputModelChangeSubscription = null;
        }
    };
    /**
     * @private
     * @return {?}
     */
    SliderComponent.prototype.unsubscribeManualRefresh = /**
     * @private
     * @return {?}
     */
    function () {
        if (!ValueHelper.isNullOrUndefined(this.manualRefreshSubscription)) {
            this.manualRefreshSubscription.unsubscribe();
            this.manualRefreshSubscription = null;
        }
    };
    /**
     * @private
     * @return {?}
     */
    SliderComponent.prototype.unsubscribeTriggerFocus = /**
     * @private
     * @return {?}
     */
    function () {
        if (!ValueHelper.isNullOrUndefined(this.triggerFocusSubscription)) {
            this.triggerFocusSubscription.unsubscribe();
            this.triggerFocusSubscription = null;
        }
    };
    /**
     * @private
     * @param {?} pointerType
     * @return {?}
     */
    SliderComponent.prototype.getPointerElement = /**
     * @private
     * @param {?} pointerType
     * @return {?}
     */
    function (pointerType) {
        if (pointerType === PointerType.Min) {
            return this.minHandleElement;
        }
        else if (pointerType === PointerType.Max) {
            return this.maxHandleElement;
        }
        return null;
    };
    /**
     * @private
     * @return {?}
     */
    SliderComponent.prototype.getCurrentTrackingValue = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.currentTrackingPointer === PointerType.Min) {
            return this.viewLowValue;
        }
        else if (this.currentTrackingPointer === PointerType.Max) {
            return this.viewHighValue;
        }
        return null;
    };
    /**
     * @private
     * @param {?} modelValue
     * @return {?}
     */
    SliderComponent.prototype.modelValueToViewValue = /**
     * @private
     * @param {?} modelValue
     * @return {?}
     */
    function (modelValue) {
        if (ValueHelper.isNullOrUndefined(modelValue)) {
            return NaN;
        }
        if (!ValueHelper.isNullOrUndefined(this.viewOptions.stepsArray) && !this.viewOptions.bindIndexForStepsArray) {
            return ValueHelper.findStepIndex(+modelValue, this.viewOptions.stepsArray);
        }
        return +modelValue;
    };
    /**
     * @private
     * @param {?} viewValue
     * @return {?}
     */
    SliderComponent.prototype.viewValueToModelValue = /**
     * @private
     * @param {?} viewValue
     * @return {?}
     */
    function (viewValue) {
        if (!ValueHelper.isNullOrUndefined(this.viewOptions.stepsArray) && !this.viewOptions.bindIndexForStepsArray) {
            return this.getStepValue(viewValue);
        }
        return viewValue;
    };
    /**
     * @private
     * @param {?} sliderValue
     * @return {?}
     */
    SliderComponent.prototype.getStepValue = /**
     * @private
     * @param {?} sliderValue
     * @return {?}
     */
    function (sliderValue) {
        /** @type {?} */
        var step = this.viewOptions.stepsArray[sliderValue];
        return (!ValueHelper.isNullOrUndefined(step)) ? step.value : NaN;
    };
    /**
     * @private
     * @return {?}
     */
    SliderComponent.prototype.applyViewChange = /**
     * @private
     * @return {?}
     */
    function () {
        this.value = this.viewValueToModelValue(this.viewLowValue);
        if (this.range) {
            this.highValue = this.viewValueToModelValue(this.viewHighValue);
        }
        this.outputModelChangeSubject.next({
            value: this.value,
            highValue: this.highValue,
            userEventInitiated: true,
            forceChange: false
        });
        // At this point all changes are applied and outputs are emitted, so we should be done.
        // However, input changes are communicated in different stream and we need to be ready to
        // act on the next input change even if it is exactly the same as last input change.
        // Therefore, we send a special event to reset the stream.
        this.inputModelChangeSubject.next({
            value: this.value,
            highValue: this.highValue,
            forceChange: false,
            internalChange: true
        });
    };
    // Apply model change to the slider view
    // Apply model change to the slider view
    /**
     * @private
     * @param {?} modelChange
     * @return {?}
     */
    SliderComponent.prototype.applyInputModelChange = 
    // Apply model change to the slider view
    /**
     * @private
     * @param {?} modelChange
     * @return {?}
     */
    function (modelChange) {
        /** @type {?} */
        var normalisedModelChange = this.normaliseModelValues(modelChange);
        // If normalised model change is different, apply the change to the model values
        /** @type {?} */
        var normalisationChange = !ModelValues.compare(modelChange, normalisedModelChange);
        if (normalisationChange) {
            this.value = normalisedModelChange.value;
            this.highValue = normalisedModelChange.highValue;
        }
        this.viewLowValue = this.modelValueToViewValue(normalisedModelChange.value);
        if (this.range) {
            this.viewHighValue = this.modelValueToViewValue(normalisedModelChange.highValue);
        }
        else {
            this.viewHighValue = null;
        }
        this.updateLowHandle(this.valueToPosition(this.viewLowValue));
        if (this.range) {
            this.updateHighHandle(this.valueToPosition(this.viewHighValue));
        }
        this.updateSelectionBar();
        this.updateTicksScale();
        this.updateAriaAttributes();
        if (this.range) {
            this.updateCombinedLabel();
        }
        // At the end, we need to communicate the model change to the outputs as well
        // Normalisation changes are also always forced out to ensure that subscribers always end up in correct state
        this.outputModelChangeSubject.next({
            value: normalisedModelChange.value,
            highValue: normalisedModelChange.highValue,
            forceChange: normalisationChange,
            userEventInitiated: false
        });
    };
    // Publish model change to output event emitters and registered callbacks
    // Publish model change to output event emitters and registered callbacks
    /**
     * @private
     * @param {?} modelChange
     * @return {?}
     */
    SliderComponent.prototype.publishOutputModelChange = 
    // Publish model change to output event emitters and registered callbacks
    /**
     * @private
     * @param {?} modelChange
     * @return {?}
     */
    function (modelChange) {
        var _this = this;
        /** @type {?} */
        var emitOutputs = (/**
         * @return {?}
         */
        function () {
            _this.valueChange.emit(modelChange.value);
            if (_this.range) {
                _this.highValueChange.emit(modelChange.highValue);
            }
            if (!ValueHelper.isNullOrUndefined(_this.onChangeCallback)) {
                if (_this.range) {
                    _this.onChangeCallback([modelChange.value, modelChange.highValue]);
                }
                else {
                    _this.onChangeCallback(modelChange.value);
                }
            }
            if (!ValueHelper.isNullOrUndefined(_this.onTouchedCallback)) {
                if (_this.range) {
                    _this.onTouchedCallback([modelChange.value, modelChange.highValue]);
                }
                else {
                    _this.onTouchedCallback(modelChange.value);
                }
            }
        });
        if (modelChange.userEventInitiated) {
            // If this change was initiated by a user event, we can emit outputs in the same tick
            emitOutputs();
            this.userChange.emit(this.getChangeContext());
        }
        else {
            // But, if the change was initated by something else like a change in input bindings,
            // we need to wait until next tick to emit the outputs to keep Angular change detection happy
            setTimeout((/**
             * @return {?}
             */
            function () { emitOutputs(); }));
        }
    };
    /**
     * @private
     * @param {?} input
     * @return {?}
     */
    SliderComponent.prototype.normaliseModelValues = /**
     * @private
     * @param {?} input
     * @return {?}
     */
    function (input) {
        /** @type {?} */
        var normalisedInput = new ModelValues();
        normalisedInput.value = input.value;
        normalisedInput.highValue = input.highValue;
        if (this.viewOptions.enforceStep) {
            normalisedInput.value = this.roundStep(normalisedInput.value);
            if (this.range) {
                normalisedInput.highValue = this.roundStep(normalisedInput.highValue);
            }
        }
        // Don't attempt to normalise further when using steps array (steps may be out of order and that is perfectly fine)
        if (!ValueHelper.isNullOrUndefined(this.viewOptions.stepsArray) || !this.viewOptions.enforceRange) {
            return normalisedInput;
        }
        normalisedInput.value = MathHelper.clampToRange(normalisedInput.value, this.viewOptions.floor, this.viewOptions.ceil);
        if (this.range) {
            normalisedInput.highValue = MathHelper.clampToRange(normalisedInput.highValue, this.viewOptions.floor, this.viewOptions.ceil);
        }
        // Make sure that range slider invariant (value <= highValue) is always satisfied
        if (this.range && input.value > input.highValue) {
            // We know that both values are now clamped correctly, they may just be in the wrong order
            // So the easy solution is to swap them... except swapping is sometimes disabled in options, so we make the two values the same
            if (this.viewOptions.noSwitching) {
                normalisedInput.value = normalisedInput.highValue;
            }
            else {
                /** @type {?} */
                var tempValue = input.value;
                normalisedInput.value = input.highValue;
                normalisedInput.highValue = tempValue;
            }
        }
        return normalisedInput;
    };
    /**
     * @private
     * @return {?}
     */
    SliderComponent.prototype.renormaliseModelValues = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var previousModelValues = {
            value: this.value,
            highValue: this.highValue
        };
        /** @type {?} */
        var normalisedModelValues = this.normaliseModelValues(previousModelValues);
        if (!ModelValues.compare(normalisedModelValues, previousModelValues)) {
            this.value = normalisedModelValues.value;
            this.highValue = normalisedModelValues.highValue;
            this.outputModelChangeSubject.next({
                value: this.value,
                highValue: this.highValue,
                forceChange: true,
                userEventInitiated: false
            });
        }
    };
    /**
     * @private
     * @return {?}
     */
    SliderComponent.prototype.onChangeOptions = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.initHasRun) {
            return;
        }
        /** @type {?} */
        var previousInputEventsInterval = this.viewOptions.inputEventsInterval;
        /** @type {?} */
        var previousOutputEventsInterval = this.viewOptions.outputEventsInterval;
        this.applyOptions();
        if (previousInputEventsInterval !== this.viewOptions.inputEventsInterval) {
            this.unsubscribeInputModelChangeSubject();
            this.subscribeInputModelChangeSubject(this.viewOptions.inputEventsInterval);
        }
        if (previousOutputEventsInterval !== this.viewOptions.outputEventsInterval) {
            this.unsubscribeInputModelChangeSubject();
            this.subscribeInputModelChangeSubject(this.viewOptions.outputEventsInterval);
        }
        // With new options, we need to re-normalise model values if necessary
        this.renormaliseModelValues();
        this.viewLowValue = this.modelValueToViewValue(this.value);
        if (this.range) {
            this.viewHighValue = this.modelValueToViewValue(this.highValue);
        }
        else {
            this.viewHighValue = null;
        }
        this.resetSlider();
    };
    // Read the user options and apply them to the slider model
    // Read the user options and apply them to the slider model
    /**
     * @private
     * @return {?}
     */
    SliderComponent.prototype.applyOptions = 
    // Read the user options and apply them to the slider model
    /**
     * @private
     * @return {?}
     */
    function () {
        this.viewOptions = new Options();
        Object.assign(this.viewOptions, this.options);
        this.viewOptions.draggableRange = this.range && this.viewOptions.draggableRange;
        this.viewOptions.draggableRangeOnly = this.range && this.viewOptions.draggableRangeOnly;
        if (this.viewOptions.draggableRangeOnly) {
            this.viewOptions.draggableRange = true;
        }
        this.viewOptions.showTicks = this.viewOptions.showTicks ||
            this.viewOptions.showTicksValues ||
            !ValueHelper.isNullOrUndefined(this.viewOptions.ticksArray);
        if (this.viewOptions.showTicks &&
            (!ValueHelper.isNullOrUndefined(this.viewOptions.tickStep) || !ValueHelper.isNullOrUndefined(this.viewOptions.ticksArray))) {
            this.intermediateTicks = true;
        }
        this.viewOptions.showSelectionBar = this.viewOptions.showSelectionBar ||
            this.viewOptions.showSelectionBarEnd ||
            !ValueHelper.isNullOrUndefined(this.viewOptions.showSelectionBarFromValue);
        if (!ValueHelper.isNullOrUndefined(this.viewOptions.stepsArray)) {
            this.applyStepsArrayOptions();
        }
        else {
            this.applyFloorCeilOptions();
        }
        if (ValueHelper.isNullOrUndefined(this.viewOptions.combineLabels)) {
            this.viewOptions.combineLabels = (/**
             * @param {?} minValue
             * @param {?} maxValue
             * @return {?}
             */
            function (minValue, maxValue) {
                return minValue + ' - ' + maxValue;
            });
        }
        if (this.viewOptions.logScale && this.viewOptions.floor === 0) {
            throw Error('Can\'t use floor=0 with logarithmic scale');
        }
    };
    /**
     * @private
     * @return {?}
     */
    SliderComponent.prototype.applyStepsArrayOptions = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.viewOptions.floor = 0;
        this.viewOptions.ceil = this.viewOptions.stepsArray.length - 1;
        this.viewOptions.step = 1;
        if (ValueHelper.isNullOrUndefined(this.viewOptions.translate)) {
            this.viewOptions.translate = (/**
             * @param {?} modelValue
             * @return {?}
             */
            function (modelValue) {
                if (_this.viewOptions.bindIndexForStepsArray) {
                    return String(_this.getStepValue(modelValue));
                }
                return String(modelValue);
            });
        }
        this.viewOptions.getLegend = (/**
         * @param {?} index
         * @return {?}
         */
        function (index) {
            /** @type {?} */
            var step = _this.viewOptions.stepsArray[index];
            return step.legend;
        });
    };
    /**
     * @private
     * @return {?}
     */
    SliderComponent.prototype.applyFloorCeilOptions = /**
     * @private
     * @return {?}
     */
    function () {
        if (ValueHelper.isNullOrUndefined(this.viewOptions.step)) {
            this.viewOptions.step = 1;
        }
        else {
            this.viewOptions.step = +this.viewOptions.step;
            if (this.viewOptions.step <= 0) {
                this.viewOptions.step = 1;
            }
        }
        if (ValueHelper.isNullOrUndefined(this.viewOptions.ceil) ||
            ValueHelper.isNullOrUndefined(this.viewOptions.floor)) {
            throw Error('floor and ceil options must be supplied');
        }
        this.viewOptions.ceil = +this.viewOptions.ceil;
        this.viewOptions.floor = +this.viewOptions.floor;
        if (ValueHelper.isNullOrUndefined(this.viewOptions.translate)) {
            this.viewOptions.translate = (/**
             * @param {?} value
             * @return {?}
             */
            function (value) { return String(value); });
        }
    };
    // Resets slider
    // Resets slider
    /**
     * @private
     * @return {?}
     */
    SliderComponent.prototype.resetSlider = 
    // Resets slider
    /**
     * @private
     * @return {?}
     */
    function () {
        this.manageElementsStyle();
        this.addAccessibility();
        this.updateCeilLabel();
        this.updateFloorLabel();
        this.unbindEvents();
        this.manageEventsBindings();
        this.updateDisabledState();
        this.calculateViewDimensions();
        this.refocusPointerIfNeeded();
    };
    // Sets focus on the specified pointer
    // Sets focus on the specified pointer
    /**
     * @private
     * @param {?} pointerType
     * @return {?}
     */
    SliderComponent.prototype.focusPointer = 
    // Sets focus on the specified pointer
    /**
     * @private
     * @param {?} pointerType
     * @return {?}
     */
    function (pointerType) {
        // If not supplied, use min pointer as default
        if (pointerType !== PointerType.Min && pointerType !== PointerType.Max) {
            pointerType = PointerType.Min;
        }
        if (pointerType === PointerType.Min) {
            this.minHandleElement.focus();
        }
        else if (this.range && pointerType === PointerType.Max) {
            this.maxHandleElement.focus();
        }
    };
    /**
     * @private
     * @return {?}
     */
    SliderComponent.prototype.refocusPointerIfNeeded = /**
     * @private
     * @return {?}
     */
    function () {
        if (!ValueHelper.isNullOrUndefined(this.currentFocusPointer)) {
            this.onPointerFocus(this.currentFocusPointer);
            /** @type {?} */
            var element = this.getPointerElement(this.currentFocusPointer);
            element.focus();
        }
    };
    // Update each elements style based on options
    // Update each elements style based on options
    /**
     * @private
     * @return {?}
     */
    SliderComponent.prototype.manageElementsStyle = 
    // Update each elements style based on options
    /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.updateScale();
        this.floorLabelElement.setAlwaysHide(this.viewOptions.showTicksValues || this.viewOptions.hideLimitLabels);
        this.ceilLabelElement.setAlwaysHide(this.viewOptions.showTicksValues || this.viewOptions.hideLimitLabels);
        /** @type {?} */
        var hideLabelsForTicks = this.viewOptions.showTicksValues && !this.intermediateTicks;
        this.minHandleLabelElement.setAlwaysHide(hideLabelsForTicks || this.viewOptions.hidePointerLabels);
        this.maxHandleLabelElement.setAlwaysHide(hideLabelsForTicks || !this.range || this.viewOptions.hidePointerLabels);
        this.combinedLabelElement.setAlwaysHide(hideLabelsForTicks || !this.range || this.viewOptions.hidePointerLabels);
        this.selectionBarElement.setAlwaysHide(!this.range && !this.viewOptions.showSelectionBar);
        this.leftOuterSelectionBarElement.setAlwaysHide(!this.range || !this.viewOptions.showOuterSelectionBars);
        this.rightOuterSelectionBarElement.setAlwaysHide(!this.range || !this.viewOptions.showOuterSelectionBars);
        this.fullBarTransparentClass = this.range && this.viewOptions.showOuterSelectionBars;
        this.selectionBarDraggableClass = this.viewOptions.draggableRange && !this.viewOptions.onlyBindHandles;
        this.ticksUnderValuesClass = this.intermediateTicks && this.options.showTicksValues;
        if (this.sliderElementVerticalClass !== this.viewOptions.vertical) {
            this.updateVerticalState();
            // The above change in host component class will not be applied until the end of this cycle
            // However, functions calculating the slider position expect the slider to be already styled as vertical
            // So as a workaround, we need to reset the slider once again to compute the correct values
            setTimeout((/**
             * @return {?}
             */
            function () { _this.resetSlider(); }));
        }
        // Changing animate class may interfere with slider reset/initialisation, so we should set it separately,
        // after all is properly set up
        if (this.sliderElementAnimateClass !== this.viewOptions.animate) {
            setTimeout((/**
             * @return {?}
             */
            function () { _this.sliderElementAnimateClass = _this.viewOptions.animate; }));
        }
    };
    // Manage the events bindings based on readOnly and disabled options
    // Manage the events bindings based on readOnly and disabled options
    /**
     * @private
     * @return {?}
     */
    SliderComponent.prototype.manageEventsBindings = 
    // Manage the events bindings based on readOnly and disabled options
    /**
     * @private
     * @return {?}
     */
    function () {
        if (this.viewOptions.disabled || this.viewOptions.readOnly) {
            this.unbindEvents();
        }
        else {
            this.bindEvents();
        }
    };
    // Set the disabled state based on disabled option
    // Set the disabled state based on disabled option
    /**
     * @private
     * @return {?}
     */
    SliderComponent.prototype.updateDisabledState = 
    // Set the disabled state based on disabled option
    /**
     * @private
     * @return {?}
     */
    function () {
        this.sliderElementDisabledAttr = this.viewOptions.disabled ? 'disabled' : null;
    };
    // Set vertical state based on vertical option
    // Set vertical state based on vertical option
    /**
     * @private
     * @return {?}
     */
    SliderComponent.prototype.updateVerticalState = 
    // Set vertical state based on vertical option
    /**
     * @private
     * @return {?}
     */
    function () {
        var e_1, _a;
        this.sliderElementVerticalClass = this.viewOptions.vertical;
        try {
            for (var _b = __values(this.getAllSliderElements()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var element = _c.value;
                // This is also called before ngAfterInit, so need to check that view child bindings work
                if (!ValueHelper.isNullOrUndefined(element)) {
                    element.setVertical(this.viewOptions.vertical);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * @private
     * @return {?}
     */
    SliderComponent.prototype.updateScale = /**
     * @private
     * @return {?}
     */
    function () {
        var e_2, _a;
        try {
            for (var _b = __values(this.getAllSliderElements()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var element = _c.value;
                element.setScale(this.viewOptions.scale);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    /**
     * @private
     * @return {?}
     */
    SliderComponent.prototype.getAllSliderElements = /**
     * @private
     * @return {?}
     */
    function () {
        return [this.leftOuterSelectionBarElement,
            this.rightOuterSelectionBarElement,
            this.fullBarElement,
            this.selectionBarElement,
            this.minHandleElement,
            this.maxHandleElement,
            this.floorLabelElement,
            this.ceilLabelElement,
            this.minHandleLabelElement,
            this.maxHandleLabelElement,
            this.combinedLabelElement,
            this.ticksElement
        ];
    };
    // Initialize slider handles positions and labels
    // Run only once during initialization and every time view port changes size
    // Initialize slider handles positions and labels
    // Run only once during initialization and every time view port changes size
    /**
     * @private
     * @return {?}
     */
    SliderComponent.prototype.initHandles = 
    // Initialize slider handles positions and labels
    // Run only once during initialization and every time view port changes size
    /**
     * @private
     * @return {?}
     */
    function () {
        this.updateLowHandle(this.valueToPosition(this.viewLowValue));
        /*
       the order here is important since the selection bar should be
       updated after the high handle but before the combined label
       */
        if (this.range) {
            this.updateHighHandle(this.valueToPosition(this.viewHighValue));
        }
        this.updateSelectionBar();
        if (this.range) {
            this.updateCombinedLabel();
        }
        this.updateTicksScale();
    };
    // Adds accessibility attributes, run only once during initialization
    // Adds accessibility attributes, run only once during initialization
    /**
     * @private
     * @return {?}
     */
    SliderComponent.prototype.addAccessibility = 
    // Adds accessibility attributes, run only once during initialization
    /**
     * @private
     * @return {?}
     */
    function () {
        this.updateAriaAttributes();
        this.minHandleElement.role = 'slider';
        if (this.viewOptions.keyboardSupport &&
            !(this.viewOptions.readOnly || this.viewOptions.disabled)) {
            this.minHandleElement.tabindex = '0';
        }
        else {
            this.minHandleElement.tabindex = '';
        }
        if (this.viewOptions.vertical) {
            this.minHandleElement.ariaOrientation = 'vertical';
        }
        if (!ValueHelper.isNullOrUndefined(this.viewOptions.ariaLabel)) {
            this.minHandleElement.ariaLabel = this.viewOptions.ariaLabel;
        }
        else if (!ValueHelper.isNullOrUndefined(this.viewOptions.ariaLabelledBy)) {
            this.minHandleElement.ariaLabelledBy = this.viewOptions.ariaLabelledBy;
        }
        if (this.range) {
            this.maxHandleElement.role = 'slider';
            if (this.viewOptions.keyboardSupport &&
                !(this.viewOptions.readOnly || this.viewOptions.disabled)) {
                this.maxHandleElement.tabindex = '0';
            }
            else {
                this.maxHandleElement.tabindex = '';
            }
            this.maxHandleElement.ariaOrientation = this.viewOptions.vertical ? 'vertical' : 'horizontal';
            if (!ValueHelper.isNullOrUndefined(this.viewOptions.ariaLabelHigh)) {
                this.maxHandleElement.ariaLabel = this.viewOptions.ariaLabelHigh;
            }
            else if (!ValueHelper.isNullOrUndefined(this.viewOptions.ariaLabelledByHigh)) {
                this.maxHandleElement.ariaLabelledBy = this.viewOptions.ariaLabelledByHigh;
            }
        }
    };
    // Updates aria attributes according to current values
    // Updates aria attributes according to current values
    /**
     * @private
     * @return {?}
     */
    SliderComponent.prototype.updateAriaAttributes = 
    // Updates aria attributes according to current values
    /**
     * @private
     * @return {?}
     */
    function () {
        this.minHandleElement.ariaValueNow = (+this.value).toString();
        this.minHandleElement.ariaValueText = this.viewOptions.translate(+this.value, LabelType.Low);
        this.minHandleElement.ariaValueMin = this.viewOptions.floor.toString();
        this.minHandleElement.ariaValueMax = this.viewOptions.ceil.toString();
        if (this.range) {
            this.maxHandleElement.ariaValueNow = (+this.highValue).toString();
            this.maxHandleElement.ariaValueText = this.viewOptions.translate(+this.highValue, LabelType.High);
            this.maxHandleElement.ariaValueMin = this.viewOptions.floor.toString();
            this.maxHandleElement.ariaValueMax = this.viewOptions.ceil.toString();
        }
    };
    // Calculate dimensions that are dependent on view port size
    // Run once during initialization and every time view port changes size.
    // Calculate dimensions that are dependent on view port size
    // Run once during initialization and every time view port changes size.
    /**
     * @private
     * @return {?}
     */
    SliderComponent.prototype.calculateViewDimensions = 
    // Calculate dimensions that are dependent on view port size
    // Run once during initialization and every time view port changes size.
    /**
     * @private
     * @return {?}
     */
    function () {
        if (!ValueHelper.isNullOrUndefined(this.viewOptions.handleDimension)) {
            this.minHandleElement.setDimension(this.viewOptions.handleDimension);
        }
        else {
            this.minHandleElement.calculateDimension();
        }
        /** @type {?} */
        var handleWidth = this.minHandleElement.dimension;
        this.handleHalfDimension = handleWidth / 2;
        if (!ValueHelper.isNullOrUndefined(this.viewOptions.barDimension)) {
            this.fullBarElement.setDimension(this.viewOptions.barDimension);
        }
        else {
            this.fullBarElement.calculateDimension();
        }
        this.maxHandlePosition = this.fullBarElement.dimension - handleWidth;
        if (this.initHasRun) {
            this.updateFloorLabel();
            this.updateCeilLabel();
            this.initHandles();
        }
    };
    /**
     * @private
     * @return {?}
     */
    SliderComponent.prototype.calculateViewDimensionsAndDetectChanges = /**
     * @private
     * @return {?}
     */
    function () {
        this.calculateViewDimensions();
        this.changeDetectionRef.detectChanges();
    };
    // Update the ticks position
    // Update the ticks position
    /**
     * @private
     * @return {?}
     */
    SliderComponent.prototype.updateTicksScale = 
    // Update the ticks position
    /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.viewOptions.showTicks) {
            return;
        }
        /** @type {?} */
        var ticksArray = !ValueHelper.isNullOrUndefined(this.viewOptions.ticksArray)
            ? this.viewOptions.ticksArray
            : this.getTicksArray();
        /** @type {?} */
        var translate = this.viewOptions.vertical ? 'translateY' : 'translateX';
        if (this.viewOptions.rightToLeft) {
            ticksArray.reverse();
        }
        /** @type {?} */
        var newTicks = ticksArray.map((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var position = _this.valueToPosition(value);
            if (_this.viewOptions.vertical) {
                position = _this.maxHandlePosition - position;
            }
            /** @type {?} */
            var translation = translate + '(' + Math.round(position) + 'px)';
            /** @type {?} */
            var tick = new Tick();
            tick.selected = _this.isTickSelected(value);
            tick.style = {
                '-webkit-transform': translation,
                '-moz-transform': translation,
                '-o-transform': translation,
                '-ms-transform': translation,
                transform: translation,
            };
            if (tick.selected && !ValueHelper.isNullOrUndefined(_this.viewOptions.getSelectionBarColor)) {
                tick.style['background-color'] = _this.getSelectionBarColor();
            }
            if (!tick.selected && !ValueHelper.isNullOrUndefined(_this.viewOptions.getTickColor)) {
                tick.style['background-color'] = _this.getTickColor(value);
            }
            if (!ValueHelper.isNullOrUndefined(_this.viewOptions.ticksTooltip)) {
                tick.tooltip = _this.viewOptions.ticksTooltip(value);
                tick.tooltipPlacement = _this.viewOptions.vertical ? 'right' : 'top';
            }
            if (_this.viewOptions.showTicksValues && (value % _this.viewOptions.tickValueStep === 0)) {
                tick.value = _this.getDisplayValue(value, LabelType.TickValue);
                if (!ValueHelper.isNullOrUndefined(_this.viewOptions.ticksValuesTooltip)) {
                    tick.valueTooltip = _this.viewOptions.ticksValuesTooltip(value);
                    tick.valueTooltipPlacement = _this.viewOptions.vertical
                        ? 'right'
                        : 'top';
                }
            }
            if (!ValueHelper.isNullOrUndefined(_this.viewOptions.getLegend)) {
                /** @type {?} */
                var legend = _this.viewOptions.getLegend(value);
                if (!ValueHelper.isNullOrUndefined(legend)) {
                    tick.legend = legend;
                }
            }
            return tick;
        }));
        // We should avoid re-creating the ticks array if possible
        // This both improves performance and makes CSS animations work correctly
        if (!ValueHelper.isNullOrUndefined(this.ticks) && this.ticks.length === newTicks.length) {
            for (var i = 0; i < newTicks.length; ++i) {
                Object.assign(this.ticks[i], newTicks[i]);
            }
        }
        else {
            this.ticks = newTicks;
        }
        this.changeDetectionRef.detectChanges();
    };
    /**
     * @private
     * @return {?}
     */
    SliderComponent.prototype.getTicksArray = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var step = (!ValueHelper.isNullOrUndefined(this.viewOptions.tickStep)) ? this.viewOptions.tickStep : this.viewOptions.step;
        /** @type {?} */
        var ticksArray = [];
        for (var value = this.viewOptions.floor; value <= this.viewOptions.ceil; value += step) {
            ticksArray.push(value);
        }
        return ticksArray;
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    SliderComponent.prototype.isTickSelected = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (!this.range) {
            if (!ValueHelper.isNullOrUndefined(this.viewOptions.showSelectionBarFromValue)) {
                /** @type {?} */
                var center = this.viewOptions.showSelectionBarFromValue;
                if (this.viewLowValue > center &&
                    value >= center &&
                    value <= this.viewLowValue) {
                    return true;
                }
                else if (this.viewLowValue < center &&
                    value <= center &&
                    value >= this.viewLowValue) {
                    return true;
                }
            }
            else if (this.viewOptions.showSelectionBarEnd) {
                if (value >= this.viewLowValue) {
                    return true;
                }
            }
            else if (this.viewOptions.showSelectionBar && value <= this.viewLowValue) {
                return true;
            }
        }
        if (this.range && value >= this.viewLowValue && value <= this.viewHighValue) {
            return true;
        }
        return false;
    };
    // Update position of the floor label
    // Update position of the floor label
    /**
     * @private
     * @return {?}
     */
    SliderComponent.prototype.updateFloorLabel = 
    // Update position of the floor label
    /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.floorLabelElement.alwaysHide) {
            this.floorLabelElement.setValue(this.getDisplayValue(this.viewOptions.floor, LabelType.Floor));
            this.floorLabelElement.calculateDimension();
            /** @type {?} */
            var position = this.viewOptions.rightToLeft
                ? this.fullBarElement.dimension - this.floorLabelElement.dimension
                : 0;
            this.floorLabelElement.setPosition(position);
        }
    };
    // Update position of the ceiling label
    // Update position of the ceiling label
    /**
     * @private
     * @return {?}
     */
    SliderComponent.prototype.updateCeilLabel = 
    // Update position of the ceiling label
    /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.ceilLabelElement.alwaysHide) {
            this.ceilLabelElement.setValue(this.getDisplayValue(this.viewOptions.ceil, LabelType.Ceil));
            this.ceilLabelElement.calculateDimension();
            /** @type {?} */
            var position = this.viewOptions.rightToLeft
                ? 0
                : this.fullBarElement.dimension - this.ceilLabelElement.dimension;
            this.ceilLabelElement.setPosition(position);
        }
    };
    // Update slider handles and label positions
    // Update slider handles and label positions
    /**
     * @private
     * @param {?} which
     * @param {?} newPos
     * @return {?}
     */
    SliderComponent.prototype.updateHandles = 
    // Update slider handles and label positions
    /**
     * @private
     * @param {?} which
     * @param {?} newPos
     * @return {?}
     */
    function (which, newPos) {
        if (which === PointerType.Min) {
            this.updateLowHandle(newPos);
        }
        else if (which === PointerType.Max) {
            this.updateHighHandle(newPos);
        }
        this.updateSelectionBar();
        this.updateTicksScale();
        if (this.range) {
            this.updateCombinedLabel();
        }
    };
    // Helper function to work out the position for handle labels depending on RTL or not
    // Helper function to work out the position for handle labels depending on RTL or not
    /**
     * @private
     * @param {?} labelType
     * @param {?} newPos
     * @return {?}
     */
    SliderComponent.prototype.getHandleLabelPos = 
    // Helper function to work out the position for handle labels depending on RTL or not
    /**
     * @private
     * @param {?} labelType
     * @param {?} newPos
     * @return {?}
     */
    function (labelType, newPos) {
        /** @type {?} */
        var labelDimension = (labelType === PointerType.Min)
            ? this.minHandleLabelElement.dimension
            : this.maxHandleLabelElement.dimension;
        /** @type {?} */
        var nearHandlePos = newPos - labelDimension / 2 + this.handleHalfDimension;
        /** @type {?} */
        var endOfBarPos = this.fullBarElement.dimension - labelDimension;
        if (!this.viewOptions.boundPointerLabels) {
            return nearHandlePos;
        }
        if ((this.viewOptions.rightToLeft && labelType === PointerType.Min) ||
            (!this.viewOptions.rightToLeft && labelType === PointerType.Max)) {
            return Math.min(nearHandlePos, endOfBarPos);
        }
        else {
            return Math.min(Math.max(nearHandlePos, 0), endOfBarPos);
        }
    };
    // Update low slider handle position and label
    // Update low slider handle position and label
    /**
     * @private
     * @param {?} newPos
     * @return {?}
     */
    SliderComponent.prototype.updateLowHandle = 
    // Update low slider handle position and label
    /**
     * @private
     * @param {?} newPos
     * @return {?}
     */
    function (newPos) {
        this.minHandleElement.setPosition(newPos);
        this.minHandleLabelElement.setValue(this.getDisplayValue(this.viewLowValue, LabelType.Low));
        this.minHandleLabelElement.setPosition(this.getHandleLabelPos(PointerType.Min, newPos));
        if (!ValueHelper.isNullOrUndefined(this.viewOptions.getPointerColor)) {
            this.minPointerStyle = {
                backgroundColor: this.getPointerColor(PointerType.Min),
            };
        }
        if (this.viewOptions.autoHideLimitLabels) {
            this.updateFloorAndCeilLabelsVisibility();
        }
    };
    // Update high slider handle position and label
    // Update high slider handle position and label
    /**
     * @private
     * @param {?} newPos
     * @return {?}
     */
    SliderComponent.prototype.updateHighHandle = 
    // Update high slider handle position and label
    /**
     * @private
     * @param {?} newPos
     * @return {?}
     */
    function (newPos) {
        this.maxHandleElement.setPosition(newPos);
        this.maxHandleLabelElement.setValue(this.getDisplayValue(this.viewHighValue, LabelType.High));
        this.maxHandleLabelElement.setPosition(this.getHandleLabelPos(PointerType.Max, newPos));
        if (!ValueHelper.isNullOrUndefined(this.viewOptions.getPointerColor)) {
            this.maxPointerStyle = {
                backgroundColor: this.getPointerColor(PointerType.Max),
            };
        }
        if (this.viewOptions.autoHideLimitLabels) {
            this.updateFloorAndCeilLabelsVisibility();
        }
    };
    // Show/hide floor/ceiling label
    // Show/hide floor/ceiling label
    /**
     * @private
     * @return {?}
     */
    SliderComponent.prototype.updateFloorAndCeilLabelsVisibility = 
    // Show/hide floor/ceiling label
    /**
     * @private
     * @return {?}
     */
    function () {
        // Show based only on hideLimitLabels if pointer labels are hidden
        if (this.viewOptions.hidePointerLabels) {
            return;
        }
        /** @type {?} */
        var floorLabelHidden = false;
        /** @type {?} */
        var ceilLabelHidden = false;
        /** @type {?} */
        var isMinLabelAtFloor = this.isLabelBelowFloorLabel(this.minHandleLabelElement);
        /** @type {?} */
        var isMinLabelAtCeil = this.isLabelAboveCeilLabel(this.minHandleLabelElement);
        /** @type {?} */
        var isMaxLabelAtCeil = this.isLabelAboveCeilLabel(this.maxHandleLabelElement);
        /** @type {?} */
        var isCombinedLabelAtFloor = this.isLabelBelowFloorLabel(this.combinedLabelElement);
        /** @type {?} */
        var isCombinedLabelAtCeil = this.isLabelAboveCeilLabel(this.combinedLabelElement);
        if (isMinLabelAtFloor) {
            floorLabelHidden = true;
            this.floorLabelElement.hide();
        }
        else {
            floorLabelHidden = false;
            this.floorLabelElement.show();
        }
        if (isMinLabelAtCeil) {
            ceilLabelHidden = true;
            this.ceilLabelElement.hide();
        }
        else {
            ceilLabelHidden = false;
            this.ceilLabelElement.show();
        }
        if (this.range) {
            /** @type {?} */
            var hideCeil = this.combinedLabelElement.isVisible() ? isCombinedLabelAtCeil : isMaxLabelAtCeil;
            /** @type {?} */
            var hideFloor = this.combinedLabelElement.isVisible() ? isCombinedLabelAtFloor : isMinLabelAtFloor;
            if (hideCeil) {
                this.ceilLabelElement.hide();
            }
            else if (!ceilLabelHidden) {
                this.ceilLabelElement.show();
            }
            // Hide or show floor label
            if (hideFloor) {
                this.floorLabelElement.hide();
            }
            else if (!floorLabelHidden) {
                this.floorLabelElement.show();
            }
        }
    };
    /**
     * @private
     * @param {?} label
     * @return {?}
     */
    SliderComponent.prototype.isLabelBelowFloorLabel = /**
     * @private
     * @param {?} label
     * @return {?}
     */
    function (label) {
        /** @type {?} */
        var pos = label.position;
        /** @type {?} */
        var dim = label.dimension;
        /** @type {?} */
        var floorPos = this.floorLabelElement.position;
        /** @type {?} */
        var floorDim = this.floorLabelElement.dimension;
        return this.viewOptions.rightToLeft
            ? pos + dim >= floorPos - 2
            : pos <= floorPos + floorDim + 2;
    };
    /**
     * @private
     * @param {?} label
     * @return {?}
     */
    SliderComponent.prototype.isLabelAboveCeilLabel = /**
     * @private
     * @param {?} label
     * @return {?}
     */
    function (label) {
        /** @type {?} */
        var pos = label.position;
        /** @type {?} */
        var dim = label.dimension;
        /** @type {?} */
        var ceilPos = this.ceilLabelElement.position;
        /** @type {?} */
        var ceilDim = this.ceilLabelElement.dimension;
        return this.viewOptions.rightToLeft
            ? pos <= ceilPos + ceilDim + 2
            : pos + dim >= ceilPos - 2;
    };
    // Update slider selection bar, combined label and range label
    // Update slider selection bar, combined label and range label
    /**
     * @private
     * @return {?}
     */
    SliderComponent.prototype.updateSelectionBar = 
    // Update slider selection bar, combined label and range label
    /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var position = 0;
        /** @type {?} */
        var dimension = 0;
        /** @type {?} */
        var isSelectionBarFromRight = this.viewOptions.rightToLeft
            ? !this.viewOptions.showSelectionBarEnd
            : this.viewOptions.showSelectionBarEnd;
        /** @type {?} */
        var positionForRange = this.viewOptions.rightToLeft
            ? this.maxHandleElement.position + this.handleHalfDimension
            : this.minHandleElement.position + this.handleHalfDimension;
        if (this.range) {
            dimension = Math.abs(this.maxHandleElement.position - this.minHandleElement.position);
            position = positionForRange;
        }
        else {
            if (!ValueHelper.isNullOrUndefined(this.viewOptions.showSelectionBarFromValue)) {
                /** @type {?} */
                var center = this.viewOptions.showSelectionBarFromValue;
                /** @type {?} */
                var centerPosition = this.valueToPosition(center);
                /** @type {?} */
                var isModelGreaterThanCenter = this.viewOptions.rightToLeft
                    ? this.viewLowValue <= center
                    : this.viewLowValue > center;
                if (isModelGreaterThanCenter) {
                    dimension = this.minHandleElement.position - centerPosition;
                    position = centerPosition + this.handleHalfDimension;
                }
                else {
                    dimension = centerPosition - this.minHandleElement.position;
                    position = this.minHandleElement.position + this.handleHalfDimension;
                }
            }
            else if (isSelectionBarFromRight) {
                dimension = Math.ceil(Math.abs(this.maxHandlePosition - this.minHandleElement.position) + this.handleHalfDimension);
                position = Math.floor(this.minHandleElement.position + this.handleHalfDimension);
            }
            else {
                dimension = this.minHandleElement.position + this.handleHalfDimension;
                position = 0;
            }
        }
        this.selectionBarElement.setDimension(dimension);
        this.selectionBarElement.setPosition(position);
        if (this.range && this.viewOptions.showOuterSelectionBars) {
            if (this.viewOptions.rightToLeft) {
                this.rightOuterSelectionBarElement.setDimension(position);
                this.rightOuterSelectionBarElement.setPosition(0);
                this.fullBarElement.calculateDimension();
                this.leftOuterSelectionBarElement.setDimension(this.fullBarElement.dimension - (position + dimension));
                this.leftOuterSelectionBarElement.setPosition(position + dimension);
            }
            else {
                this.leftOuterSelectionBarElement.setDimension(position);
                this.leftOuterSelectionBarElement.setPosition(0);
                this.fullBarElement.calculateDimension();
                this.rightOuterSelectionBarElement.setDimension(this.fullBarElement.dimension - (position + dimension));
                this.rightOuterSelectionBarElement.setPosition(position + dimension);
            }
        }
        if (!ValueHelper.isNullOrUndefined(this.viewOptions.getSelectionBarColor)) {
            /** @type {?} */
            var color = this.getSelectionBarColor();
            this.barStyle = {
                backgroundColor: color,
            };
        }
        else if (!ValueHelper.isNullOrUndefined(this.viewOptions.selectionBarGradient)) {
            /** @type {?} */
            var offset = (!ValueHelper.isNullOrUndefined(this.viewOptions.showSelectionBarFromValue))
                ? this.valueToPosition(this.viewOptions.showSelectionBarFromValue)
                : 0;
            /** @type {?} */
            var reversed = (offset - position > 0 && !isSelectionBarFromRight) || (offset - position <= 0 && isSelectionBarFromRight);
            /** @type {?} */
            var direction = this.viewOptions.vertical
                ? reversed ? 'bottom' : 'top'
                : reversed ? 'left' : 'right';
            this.barStyle = {
                backgroundImage: 'linear-gradient(to ' +
                    direction +
                    ', ' +
                    this.viewOptions.selectionBarGradient.from +
                    ' 0%,' +
                    this.viewOptions.selectionBarGradient.to +
                    ' 100%)',
            };
            if (this.viewOptions.vertical) {
                this.barStyle.backgroundPosition =
                    'center ' +
                        (offset +
                            dimension +
                            position +
                            (reversed ? -this.handleHalfDimension : 0)) +
                        'px';
                this.barStyle.backgroundSize =
                    '100% ' + (this.fullBarElement.dimension - this.handleHalfDimension) + 'px';
            }
            else {
                this.barStyle.backgroundPosition =
                    offset -
                        position +
                        (reversed ? this.handleHalfDimension : 0) +
                        'px center';
                this.barStyle.backgroundSize =
                    this.fullBarElement.dimension - this.handleHalfDimension + 'px 100%';
            }
        }
    };
    // Wrapper around the getSelectionBarColor of the user to pass to correct parameters
    // Wrapper around the getSelectionBarColor of the user to pass to correct parameters
    /**
     * @private
     * @return {?}
     */
    SliderComponent.prototype.getSelectionBarColor = 
    // Wrapper around the getSelectionBarColor of the user to pass to correct parameters
    /**
     * @private
     * @return {?}
     */
    function () {
        if (this.range) {
            return this.viewOptions.getSelectionBarColor(this.value, this.highValue);
        }
        return this.viewOptions.getSelectionBarColor(this.value);
    };
    // Wrapper around the getPointerColor of the user to pass to  correct parameters
    // Wrapper around the getPointerColor of the user to pass to  correct parameters
    /**
     * @private
     * @param {?} pointerType
     * @return {?}
     */
    SliderComponent.prototype.getPointerColor = 
    // Wrapper around the getPointerColor of the user to pass to  correct parameters
    /**
     * @private
     * @param {?} pointerType
     * @return {?}
     */
    function (pointerType) {
        if (pointerType === PointerType.Max) {
            return this.viewOptions.getPointerColor(this.highValue, pointerType);
        }
        return this.viewOptions.getPointerColor(this.value, pointerType);
    };
    // Wrapper around the getTickColor of the user to pass to correct parameters
    // Wrapper around the getTickColor of the user to pass to correct parameters
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    SliderComponent.prototype.getTickColor = 
    // Wrapper around the getTickColor of the user to pass to correct parameters
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return this.viewOptions.getTickColor(value);
    };
    // Update combined label position and value
    // Update combined label position and value
    /**
     * @private
     * @return {?}
     */
    SliderComponent.prototype.updateCombinedLabel = 
    // Update combined label position and value
    /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var isLabelOverlap = null;
        if (this.viewOptions.rightToLeft) {
            isLabelOverlap =
                this.minHandleLabelElement.position - this.minHandleLabelElement.dimension - 10 <= this.maxHandleLabelElement.position;
        }
        else {
            isLabelOverlap =
                this.minHandleLabelElement.position + this.minHandleLabelElement.dimension + 10 >= this.maxHandleLabelElement.position;
        }
        if (isLabelOverlap) {
            /** @type {?} */
            var lowDisplayValue = this.getDisplayValue(this.viewLowValue, LabelType.Low);
            /** @type {?} */
            var highDisplayValue = this.getDisplayValue(this.viewHighValue, LabelType.High);
            /** @type {?} */
            var combinedLabelValue = this.viewOptions.rightToLeft
                ? this.viewOptions.combineLabels(highDisplayValue, lowDisplayValue)
                : this.viewOptions.combineLabels(lowDisplayValue, highDisplayValue);
            this.combinedLabelElement.setValue(combinedLabelValue);
            /** @type {?} */
            var pos = this.viewOptions.boundPointerLabels
                ? Math.min(Math.max(this.selectionBarElement.position +
                    this.selectionBarElement.dimension / 2 -
                    this.combinedLabelElement.dimension / 2, 0), this.fullBarElement.dimension - this.combinedLabelElement.dimension)
                : this.selectionBarElement.position + this.selectionBarElement.dimension / 2 - this.combinedLabelElement.dimension / 2;
            this.combinedLabelElement.setPosition(pos);
            this.minHandleLabelElement.hide();
            this.maxHandleLabelElement.hide();
            this.combinedLabelElement.show();
        }
        else {
            this.updateHighHandle(this.valueToPosition(this.viewHighValue));
            this.updateLowHandle(this.valueToPosition(this.viewLowValue));
            this.maxHandleLabelElement.show();
            this.minHandleLabelElement.show();
            this.combinedLabelElement.hide();
        }
        if (this.viewOptions.autoHideLimitLabels) {
            this.updateFloorAndCeilLabelsVisibility();
        }
    };
    // Return the translated value if a translate function is provided else the original value
    // Return the translated value if a translate function is provided else the original value
    /**
     * @private
     * @param {?} value
     * @param {?} which
     * @return {?}
     */
    SliderComponent.prototype.getDisplayValue = 
    // Return the translated value if a translate function is provided else the original value
    /**
     * @private
     * @param {?} value
     * @param {?} which
     * @return {?}
     */
    function (value, which) {
        if (!ValueHelper.isNullOrUndefined(this.viewOptions.stepsArray) && !this.viewOptions.bindIndexForStepsArray) {
            value = this.getStepValue(value);
        }
        return this.viewOptions.translate(value, which);
    };
    // Round value to step and precision based on minValue
    // Round value to step and precision based on minValue
    /**
     * @private
     * @param {?} value
     * @param {?=} customStep
     * @return {?}
     */
    SliderComponent.prototype.roundStep = 
    // Round value to step and precision based on minValue
    /**
     * @private
     * @param {?} value
     * @param {?=} customStep
     * @return {?}
     */
    function (value, customStep) {
        /** @type {?} */
        var step = !ValueHelper.isNullOrUndefined(customStep) ? customStep : this.viewOptions.step;
        /** @type {?} */
        var steppedDifference = MathHelper.roundToPrecisionLimit((value - this.viewOptions.floor) / step, this.viewOptions.precisionLimit);
        steppedDifference = Math.round(steppedDifference) * step;
        return MathHelper.roundToPrecisionLimit(this.viewOptions.floor + steppedDifference, this.viewOptions.precisionLimit);
    };
    // Translate value to pixel position
    // Translate value to pixel position
    /**
     * @private
     * @param {?} val
     * @return {?}
     */
    SliderComponent.prototype.valueToPosition = 
    // Translate value to pixel position
    /**
     * @private
     * @param {?} val
     * @return {?}
     */
    function (val) {
        /** @type {?} */
        var fn = ValueHelper.linearValueToPosition;
        if (!ValueHelper.isNullOrUndefined(this.viewOptions.customValueToPosition)) {
            fn = this.viewOptions.customValueToPosition;
        }
        else if (this.viewOptions.logScale) {
            fn = ValueHelper.logValueToPosition;
        }
        val = MathHelper.clampToRange(val, this.viewOptions.floor, this.viewOptions.ceil);
        /** @type {?} */
        var percent = fn(val, this.viewOptions.floor, this.viewOptions.ceil);
        if (ValueHelper.isNullOrUndefined(percent)) {
            percent = 0;
        }
        if (this.viewOptions.rightToLeft) {
            percent = 1 - percent;
        }
        return percent * this.maxHandlePosition;
    };
    // Translate position to model value
    // Translate position to model value
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    SliderComponent.prototype.positionToValue = 
    // Translate position to model value
    /**
     * @private
     * @param {?} position
     * @return {?}
     */
    function (position) {
        /** @type {?} */
        var percent = position / this.maxHandlePosition;
        if (this.viewOptions.rightToLeft) {
            percent = 1 - percent;
        }
        /** @type {?} */
        var fn = ValueHelper.linearPositionToValue;
        if (!ValueHelper.isNullOrUndefined(this.viewOptions.customPositionToValue)) {
            fn = this.viewOptions.customPositionToValue;
        }
        else if (this.viewOptions.logScale) {
            fn = ValueHelper.logPositionToValue;
        }
        /** @type {?} */
        var value = fn(percent, this.viewOptions.floor, this.viewOptions.ceil);
        return !ValueHelper.isNullOrUndefined(value) ? value : 0;
    };
    // Get the X-coordinate or Y-coordinate of an event
    // Get the X-coordinate or Y-coordinate of an event
    /**
     * @private
     * @param {?} event
     * @param {?=} targetTouchId
     * @return {?}
     */
    SliderComponent.prototype.getEventXY = 
    // Get the X-coordinate or Y-coordinate of an event
    /**
     * @private
     * @param {?} event
     * @param {?=} targetTouchId
     * @return {?}
     */
    function (event, targetTouchId) {
        if (event instanceof MouseEvent) {
            return this.viewOptions.vertical ? event.clientY : event.clientX;
        }
        /** @type {?} */
        var touchIndex = 0;
        /** @type {?} */
        var touches = event.touches;
        if (!ValueHelper.isNullOrUndefined(targetTouchId)) {
            for (var i = 0; i < touches.length; i++) {
                if (touches[i].identifier === targetTouchId) {
                    touchIndex = i;
                    break;
                }
            }
        }
        // Return the target touch or if the target touch was not found in the event
        // returns the coordinates of the first touch
        return this.viewOptions.vertical ? touches[touchIndex].clientY : touches[touchIndex].clientX;
    };
    // Compute the event position depending on whether the slider is horizontal or vertical
    // Compute the event position depending on whether the slider is horizontal or vertical
    /**
     * @private
     * @param {?} event
     * @param {?=} targetTouchId
     * @return {?}
     */
    SliderComponent.prototype.getEventPosition = 
    // Compute the event position depending on whether the slider is horizontal or vertical
    /**
     * @private
     * @param {?} event
     * @param {?=} targetTouchId
     * @return {?}
     */
    function (event, targetTouchId) {
        /** @type {?} */
        var sliderElementBoundingRect = this.elementRef.nativeElement.getBoundingClientRect();
        /** @type {?} */
        var sliderPos = this.viewOptions.vertical ?
            sliderElementBoundingRect.bottom : sliderElementBoundingRect.left;
        /** @type {?} */
        var eventPos = 0;
        if (this.viewOptions.vertical) {
            eventPos = -this.getEventXY(event, targetTouchId) + sliderPos;
        }
        else {
            eventPos = this.getEventXY(event, targetTouchId) - sliderPos;
        }
        return eventPos * this.viewOptions.scale - this.handleHalfDimension;
    };
    // Get the handle closest to an event
    // Get the handle closest to an event
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    SliderComponent.prototype.getNearestHandle = 
    // Get the handle closest to an event
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.range) {
            return PointerType.Min;
        }
        /** @type {?} */
        var position = this.getEventPosition(event);
        /** @type {?} */
        var distanceMin = Math.abs(position - this.minHandleElement.position);
        /** @type {?} */
        var distanceMax = Math.abs(position - this.maxHandleElement.position);
        if (distanceMin < distanceMax) {
            return PointerType.Min;
        }
        else if (distanceMin > distanceMax) {
            return PointerType.Max;
        }
        else if (!this.viewOptions.rightToLeft) {
            // if event is at the same distance from min/max then if it's at left of minH, we return minH else maxH
            return position < this.minHandleElement.position ? PointerType.Min : PointerType.Max;
        }
        // reverse in rtl
        return position > this.minHandleElement.position ? PointerType.Min : PointerType.Max;
    };
    // Bind mouse and touch events to slider handles
    // Bind mouse and touch events to slider handles
    /**
     * @private
     * @return {?}
     */
    SliderComponent.prototype.bindEvents = 
    // Bind mouse and touch events to slider handles
    /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var draggableRange = this.viewOptions.draggableRange;
        if (!this.viewOptions.onlyBindHandles) {
            this.selectionBarElement.on('mousedown', (/**
             * @param {?} event
             * @return {?}
             */
            function (event) { return _this.onBarStart(null, draggableRange, event, true, true, true); }));
        }
        if (this.viewOptions.draggableRangeOnly) {
            this.minHandleElement.on('mousedown', (/**
             * @param {?} event
             * @return {?}
             */
            function (event) { return _this.onBarStart(PointerType.Min, draggableRange, event, true, true); }));
            this.maxHandleElement.on('mousedown', (/**
             * @param {?} event
             * @return {?}
             */
            function (event) { return _this.onBarStart(PointerType.Max, draggableRange, event, true, true); }));
        }
        else {
            this.minHandleElement.on('mousedown', (/**
             * @param {?} event
             * @return {?}
             */
            function (event) { return _this.onStart(PointerType.Min, event, true, true); }));
            if (this.range) {
                this.maxHandleElement.on('mousedown', (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) { return _this.onStart(PointerType.Max, event, true, true); }));
            }
            if (!this.viewOptions.onlyBindHandles) {
                this.fullBarElement.on('mousedown', (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) { return _this.onStart(null, event, true, true, true); }));
                this.ticksElement.on('mousedown', (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) { return _this.onStart(null, event, true, true, true, true); }));
            }
        }
        if (!this.viewOptions.onlyBindHandles) {
            this.selectionBarElement.onPassive('touchstart', (/**
             * @param {?} event
             * @return {?}
             */
            function (event) { return _this.onBarStart(null, draggableRange, event, true, true, true); }));
        }
        if (this.viewOptions.draggableRangeOnly) {
            this.minHandleElement.onPassive('touchstart', (/**
             * @param {?} event
             * @return {?}
             */
            function (event) { return _this.onBarStart(PointerType.Min, draggableRange, event, true, true); }));
            this.maxHandleElement.onPassive('touchstart', (/**
             * @param {?} event
             * @return {?}
             */
            function (event) { return _this.onBarStart(PointerType.Max, draggableRange, event, true, true); }));
        }
        else {
            this.minHandleElement.onPassive('touchstart', (/**
             * @param {?} event
             * @return {?}
             */
            function (event) { return _this.onStart(PointerType.Min, event, true, true); }));
            if (this.range) {
                this.maxHandleElement.onPassive('touchstart', (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) { return _this.onStart(PointerType.Max, event, true, true); }));
            }
            if (!this.viewOptions.onlyBindHandles) {
                this.fullBarElement.onPassive('touchstart', (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) { return _this.onStart(null, event, true, true, true); }));
                this.ticksElement.onPassive('touchstart', (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) { return _this.onStart(null, event, false, false, true, true); }));
            }
        }
        if (this.viewOptions.keyboardSupport) {
            this.minHandleElement.on('focus', (/**
             * @return {?}
             */
            function () { return _this.onPointerFocus(PointerType.Min); }));
            if (this.range) {
                this.maxHandleElement.on('focus', (/**
                 * @return {?}
                 */
                function () { return _this.onPointerFocus(PointerType.Max); }));
            }
        }
    };
    // Unbind mouse and touch events to slider handles
    // Unbind mouse and touch events to slider handles
    /**
     * @private
     * @return {?}
     */
    SliderComponent.prototype.unbindEvents = 
    // Unbind mouse and touch events to slider handles
    /**
     * @private
     * @return {?}
     */
    function () {
        var e_3, _a;
        this.unsubscribeOnMove();
        this.unsubscribeOnEnd();
        try {
            for (var _b = __values(this.getAllSliderElements()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var element = _c.value;
                element.off();
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
    };
    /**
     * @private
     * @param {?} pointerType
     * @param {?} draggableRange
     * @param {?} event
     * @param {?} bindMove
     * @param {?} bindEnd
     * @param {?=} simulateImmediateMove
     * @param {?=} simulateImmediateEnd
     * @return {?}
     */
    SliderComponent.prototype.onBarStart = /**
     * @private
     * @param {?} pointerType
     * @param {?} draggableRange
     * @param {?} event
     * @param {?} bindMove
     * @param {?} bindEnd
     * @param {?=} simulateImmediateMove
     * @param {?=} simulateImmediateEnd
     * @return {?}
     */
    function (pointerType, draggableRange, event, bindMove, bindEnd, simulateImmediateMove, simulateImmediateEnd) {
        if (draggableRange) {
            this.onDragStart(pointerType, event, bindMove, bindEnd);
        }
        else {
            this.onStart(pointerType, event, bindMove, bindEnd, simulateImmediateMove, simulateImmediateEnd);
        }
    };
    // onStart event handler
    // onStart event handler
    /**
     * @private
     * @param {?} pointerType
     * @param {?} event
     * @param {?} bindMove
     * @param {?} bindEnd
     * @param {?=} simulateImmediateMove
     * @param {?=} simulateImmediateEnd
     * @return {?}
     */
    SliderComponent.prototype.onStart = 
    // onStart event handler
    /**
     * @private
     * @param {?} pointerType
     * @param {?} event
     * @param {?} bindMove
     * @param {?} bindEnd
     * @param {?=} simulateImmediateMove
     * @param {?=} simulateImmediateEnd
     * @return {?}
     */
    function (pointerType, event, bindMove, bindEnd, simulateImmediateMove, simulateImmediateEnd) {
        var _this = this;
        event.stopPropagation();
        // Only call preventDefault() when handling non-passive events (passive events don't need it)
        if (!CompatibilityHelper.isTouchEvent(event) || !detectPassiveEvents.hasSupport) {
            event.preventDefault();
        }
        // We have to do this in case the HTML where the sliders are on
        // have been animated into view.
        this.calculateViewDimensions();
        if (ValueHelper.isNullOrUndefined(pointerType)) {
            pointerType = this.getNearestHandle(event);
        }
        this.currentTrackingPointer = pointerType;
        /** @type {?} */
        var pointerElement = this.getPointerElement(pointerType);
        pointerElement.active = true;
        if (this.viewOptions.keyboardSupport) {
            pointerElement.focus();
        }
        if (bindMove) {
            this.unsubscribeOnMove();
            /** @type {?} */
            var onMoveCallback = (/**
             * @param {?} e
             * @return {?}
             */
            function (e) { return _this.dragging.active ? _this.onDragMove(e) : _this.onMove(e); });
            if (CompatibilityHelper.isTouchEvent(event)) {
                this.onMoveEventListener = this.eventListenerHelper.attachPassiveEventListener(document, 'touchmove', onMoveCallback, this.viewOptions.touchEventsInterval);
            }
            else {
                this.onMoveEventListener = this.eventListenerHelper.attachEventListener(document, 'mousemove', onMoveCallback, this.viewOptions.mouseEventsInterval);
            }
        }
        if (bindEnd) {
            this.unsubscribeOnEnd();
            /** @type {?} */
            var onEndCallback = (/**
             * @param {?} e
             * @return {?}
             */
            function (e) { return _this.onEnd(e); });
            if (CompatibilityHelper.isTouchEvent(event)) {
                this.onEndEventListener = this.eventListenerHelper.attachPassiveEventListener(document, 'touchend', onEndCallback);
            }
            else {
                this.onEndEventListener = this.eventListenerHelper.attachEventListener(document, 'mouseup', onEndCallback);
            }
        }
        this.userChangeStart.emit(this.getChangeContext());
        if (CompatibilityHelper.isTouchEvent(event) && !ValueHelper.isNullOrUndefined(((/** @type {?} */ (event))).changedTouches)) {
            // Store the touch identifier
            if (ValueHelper.isNullOrUndefined(this.touchId)) {
                this.touchId = ((/** @type {?} */ (event))).changedTouches[0].identifier;
            }
        }
        // Click events, either with mouse or touch gesture are weird. Sometimes they result in full
        // start, move, end sequence, and sometimes, they don't - they only invoke mousedown
        // As a workaround, we simulate the first move event and the end event if it's necessary
        if (simulateImmediateMove) {
            this.onMove(event, true);
        }
        if (simulateImmediateEnd) {
            this.onEnd(event);
        }
    };
    // onMove event handler
    // onMove event handler
    /**
     * @private
     * @param {?} event
     * @param {?=} fromTick
     * @return {?}
     */
    SliderComponent.prototype.onMove = 
    // onMove event handler
    /**
     * @private
     * @param {?} event
     * @param {?=} fromTick
     * @return {?}
     */
    function (event, fromTick) {
        /** @type {?} */
        var touchForThisSlider = null;
        if (CompatibilityHelper.isTouchEvent(event)) {
            /** @type {?} */
            var changedTouches = ((/** @type {?} */ (event))).changedTouches;
            // tslint:disable-next-line: prefer-for-of
            for (var i = 0; i < changedTouches.length; i++) {
                if (changedTouches[i].identifier === this.touchId) {
                    touchForThisSlider = changedTouches[i];
                    break;
                }
            }
            if (ValueHelper.isNullOrUndefined(touchForThisSlider)) {
                return;
            }
        }
        /** @type {?} */
        var newPos = !ValueHelper.isNullOrUndefined(touchForThisSlider)
            ? this.getEventPosition(event, touchForThisSlider.identifier)
            : this.getEventPosition(event);
        /** @type {?} */
        var newValue;
        /** @type {?} */
        var ceilValue = this.viewOptions.rightToLeft
            ? this.viewOptions.floor
            : this.viewOptions.ceil;
        /** @type {?} */
        var floorValue = this.viewOptions.rightToLeft ? this.viewOptions.ceil : this.viewOptions.floor;
        if (newPos <= 0) {
            newValue = floorValue;
        }
        else if (newPos >= this.maxHandlePosition) {
            newValue = ceilValue;
        }
        else {
            newValue = this.positionToValue(newPos);
            if (fromTick && !ValueHelper.isNullOrUndefined(this.viewOptions.tickStep)) {
                newValue = this.roundStep(newValue, this.viewOptions.tickStep);
            }
            else {
                newValue = this.roundStep(newValue);
            }
        }
        this.positionTrackingHandle(newValue);
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    SliderComponent.prototype.onEnd = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (CompatibilityHelper.isTouchEvent(event)) {
            /** @type {?} */
            var changedTouches = ((/** @type {?} */ (event))).changedTouches;
            if (changedTouches[0].identifier !== this.touchId) {
                return;
            }
        }
        this.touchId = null;
        if (!this.viewOptions.keyboardSupport) {
            this.minHandleElement.active = false;
            this.maxHandleElement.active = false;
            this.currentTrackingPointer = null;
        }
        this.dragging.active = false;
        this.unsubscribeOnMove();
        this.unsubscribeOnEnd();
        this.userChangeEnd.emit(this.getChangeContext());
    };
    /**
     * @private
     * @param {?} pointerType
     * @return {?}
     */
    SliderComponent.prototype.onPointerFocus = /**
     * @private
     * @param {?} pointerType
     * @return {?}
     */
    function (pointerType) {
        var _this = this;
        /** @type {?} */
        var pointerElement = this.getPointerElement(pointerType);
        pointerElement.on('blur', (/**
         * @return {?}
         */
        function () { return _this.onPointerBlur(pointerElement); }));
        pointerElement.on('keydown', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) { return _this.onKeyboardEvent(event); }));
        pointerElement.on('keyup', (/**
         * @return {?}
         */
        function () { return _this.onKeyUp(); }));
        pointerElement.active = true;
        this.currentTrackingPointer = pointerType;
        this.currentFocusPointer = pointerType;
        this.firstKeyDown = true;
    };
    /**
     * @private
     * @return {?}
     */
    SliderComponent.prototype.onKeyUp = /**
     * @private
     * @return {?}
     */
    function () {
        this.firstKeyDown = true;
        this.userChangeEnd.emit(this.getChangeContext());
    };
    /**
     * @private
     * @param {?} pointer
     * @return {?}
     */
    SliderComponent.prototype.onPointerBlur = /**
     * @private
     * @param {?} pointer
     * @return {?}
     */
    function (pointer) {
        pointer.off('blur');
        pointer.off('keydown');
        pointer.off('keyup');
        pointer.active = false;
        if (ValueHelper.isNullOrUndefined(this.touchId)) {
            this.currentTrackingPointer = null;
            this.currentFocusPointer = null;
        }
    };
    /**
     * @private
     * @param {?} currentValue
     * @return {?}
     */
    SliderComponent.prototype.getKeyActions = /**
     * @private
     * @param {?} currentValue
     * @return {?}
     */
    function (currentValue) {
        /** @type {?} */
        var valueRange = this.viewOptions.ceil - this.viewOptions.floor;
        /** @type {?} */
        var increaseStep = currentValue + this.viewOptions.step;
        /** @type {?} */
        var decreaseStep = currentValue - this.viewOptions.step;
        /** @type {?} */
        var increasePage = currentValue + valueRange / 10;
        /** @type {?} */
        var decreasePage = currentValue - valueRange / 10;
        if (this.viewOptions.reversedControls) {
            increaseStep = currentValue - this.viewOptions.step;
            decreaseStep = currentValue + this.viewOptions.step;
            increasePage = currentValue - valueRange / 10;
            decreasePage = currentValue + valueRange / 10;
        }
        // Left to right default actions
        /** @type {?} */
        var actions = {
            UP: increaseStep,
            DOWN: decreaseStep,
            LEFT: decreaseStep,
            RIGHT: increaseStep,
            PAGEUP: increasePage,
            PAGEDOWN: decreasePage,
            HOME: this.viewOptions.reversedControls ? this.viewOptions.ceil : this.viewOptions.floor,
            END: this.viewOptions.reversedControls ? this.viewOptions.floor : this.viewOptions.ceil,
        };
        // right to left means swapping right and left arrows
        if (this.viewOptions.rightToLeft) {
            actions.LEFT = increaseStep;
            actions.RIGHT = decreaseStep;
            // right to left and vertical means we also swap up and down
            if (this.viewOptions.vertical) {
                actions.UP = decreaseStep;
                actions.DOWN = increaseStep;
            }
        }
        return actions;
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    SliderComponent.prototype.onKeyboardEvent = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var currentValue = this.getCurrentTrackingValue();
        /** @type {?} */
        var keyCode = !ValueHelper.isNullOrUndefined(event.keyCode)
            ? event.keyCode
            : event.which;
        /** @type {?} */
        var keys = {
            38: 'UP',
            40: 'DOWN',
            37: 'LEFT',
            39: 'RIGHT',
            33: 'PAGEUP',
            34: 'PAGEDOWN',
            36: 'HOME',
            35: 'END',
        };
        /** @type {?} */
        var actions = this.getKeyActions(currentValue);
        /** @type {?} */
        var key = keys[keyCode];
        /** @type {?} */
        var action = actions[key];
        if (ValueHelper.isNullOrUndefined(action) || ValueHelper.isNullOrUndefined(this.currentTrackingPointer)) {
            return;
        }
        event.preventDefault();
        if (this.firstKeyDown) {
            this.firstKeyDown = false;
            this.userChangeStart.emit(this.getChangeContext());
        }
        /** @type {?} */
        var actionValue = MathHelper.clampToRange(action, this.viewOptions.floor, this.viewOptions.ceil);
        /** @type {?} */
        var newValue = this.roundStep(actionValue);
        if (!this.viewOptions.draggableRangeOnly) {
            this.positionTrackingHandle(newValue);
        }
        else {
            /** @type {?} */
            var difference = this.viewHighValue - this.viewLowValue;
            /** @type {?} */
            var newMinValue = void 0;
            /** @type {?} */
            var newMaxValue = void 0;
            if (this.currentTrackingPointer === PointerType.Min) {
                newMinValue = newValue;
                newMaxValue = newValue + difference;
                if (newMaxValue > this.viewOptions.ceil) {
                    newMaxValue = this.viewOptions.ceil;
                    newMinValue = newMaxValue - difference;
                }
            }
            else if (this.currentTrackingPointer === PointerType.Max) {
                newMaxValue = newValue;
                newMinValue = newValue - difference;
                if (newMinValue < this.viewOptions.floor) {
                    newMinValue = this.viewOptions.floor;
                    newMaxValue = newMinValue + difference;
                }
            }
            this.positionTrackingBar(newMinValue, newMaxValue);
        }
    };
    // onDragStart event handler, handles dragging of the middle bar
    // onDragStart event handler, handles dragging of the middle bar
    /**
     * @private
     * @param {?} pointerType
     * @param {?} event
     * @param {?} bindMove
     * @param {?} bindEnd
     * @return {?}
     */
    SliderComponent.prototype.onDragStart = 
    // onDragStart event handler, handles dragging of the middle bar
    /**
     * @private
     * @param {?} pointerType
     * @param {?} event
     * @param {?} bindMove
     * @param {?} bindEnd
     * @return {?}
     */
    function (pointerType, event, bindMove, bindEnd) {
        /** @type {?} */
        var position = this.getEventPosition(event);
        this.dragging = new Dragging();
        this.dragging.active = true;
        this.dragging.value = this.positionToValue(position);
        this.dragging.difference = this.viewHighValue - this.viewLowValue;
        this.dragging.lowLimit = this.viewOptions.rightToLeft
            ? this.minHandleElement.position - position
            : position - this.minHandleElement.position;
        this.dragging.highLimit = this.viewOptions.rightToLeft
            ? position - this.maxHandleElement.position
            : this.maxHandleElement.position - position;
        this.onStart(pointerType, event, bindMove, bindEnd);
    };
    /** Get min value depending on whether the newPos is outOfBounds above or below the bar and rightToLeft */
    /**
     * Get min value depending on whether the newPos is outOfBounds above or below the bar and rightToLeft
     * @private
     * @param {?} newPos
     * @param {?} outOfBounds
     * @param {?} isAbove
     * @return {?}
     */
    SliderComponent.prototype.getMinValue = /**
     * Get min value depending on whether the newPos is outOfBounds above or below the bar and rightToLeft
     * @private
     * @param {?} newPos
     * @param {?} outOfBounds
     * @param {?} isAbove
     * @return {?}
     */
    function (newPos, outOfBounds, isAbove) {
        /** @type {?} */
        var isRTL = this.viewOptions.rightToLeft;
        /** @type {?} */
        var value = null;
        if (outOfBounds) {
            if (isAbove) {
                value = isRTL
                    ? this.viewOptions.floor
                    : this.viewOptions.ceil - this.dragging.difference;
            }
            else {
                value = isRTL
                    ? this.viewOptions.ceil - this.dragging.difference
                    : this.viewOptions.floor;
            }
        }
        else {
            value = isRTL
                ? this.positionToValue(newPos + this.dragging.lowLimit)
                : this.positionToValue(newPos - this.dragging.lowLimit);
        }
        return this.roundStep(value);
    };
    /** Get max value depending on whether the newPos is outOfBounds above or below the bar and rightToLeft */
    /**
     * Get max value depending on whether the newPos is outOfBounds above or below the bar and rightToLeft
     * @private
     * @param {?} newPos
     * @param {?} outOfBounds
     * @param {?} isAbove
     * @return {?}
     */
    SliderComponent.prototype.getMaxValue = /**
     * Get max value depending on whether the newPos is outOfBounds above or below the bar and rightToLeft
     * @private
     * @param {?} newPos
     * @param {?} outOfBounds
     * @param {?} isAbove
     * @return {?}
     */
    function (newPos, outOfBounds, isAbove) {
        /** @type {?} */
        var isRTL = this.viewOptions.rightToLeft;
        /** @type {?} */
        var value = null;
        if (outOfBounds) {
            if (isAbove) {
                value = isRTL
                    ? this.viewOptions.floor + this.dragging.difference
                    : this.viewOptions.ceil;
            }
            else {
                value = isRTL
                    ? this.viewOptions.ceil
                    : this.viewOptions.floor + this.dragging.difference;
            }
        }
        else {
            if (isRTL) {
                value =
                    this.positionToValue(newPos + this.dragging.lowLimit) +
                        this.dragging.difference;
            }
            else {
                value =
                    this.positionToValue(newPos - this.dragging.lowLimit) +
                        this.dragging.difference;
            }
        }
        return this.roundStep(value);
    };
    /**
     * @private
     * @param {?=} event
     * @return {?}
     */
    SliderComponent.prototype.onDragMove = /**
     * @private
     * @param {?=} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var newPos = this.getEventPosition(event);
        /** @type {?} */
        var ceilLimit;
        /** @type {?} */
        var floorLimit;
        /** @type {?} */
        var floorHandleElement;
        /** @type {?} */
        var ceilHandleElement;
        if (this.viewOptions.rightToLeft) {
            ceilLimit = this.dragging.lowLimit;
            floorLimit = this.dragging.highLimit;
            floorHandleElement = this.maxHandleElement;
            ceilHandleElement = this.minHandleElement;
        }
        else {
            ceilLimit = this.dragging.highLimit;
            floorLimit = this.dragging.lowLimit;
            floorHandleElement = this.minHandleElement;
            ceilHandleElement = this.maxHandleElement;
        }
        /** @type {?} */
        var isUnderFloorLimit = (newPos <= floorLimit);
        /** @type {?} */
        var isOverCeilLimit = (newPos >= this.maxHandlePosition - ceilLimit);
        /** @type {?} */
        var newMinValue;
        /** @type {?} */
        var newMaxValue;
        if (isUnderFloorLimit) {
            if (floorHandleElement.position === 0) {
                return;
            }
            newMinValue = this.getMinValue(newPos, true, false);
            newMaxValue = this.getMaxValue(newPos, true, false);
        }
        else if (isOverCeilLimit) {
            if (ceilHandleElement.position === this.maxHandlePosition) {
                return;
            }
            newMaxValue = this.getMaxValue(newPos, true, true);
            newMinValue = this.getMinValue(newPos, true, true);
        }
        else {
            newMinValue = this.getMinValue(newPos, false, false);
            newMaxValue = this.getMaxValue(newPos, false, false);
        }
        this.positionTrackingBar(newMinValue, newMaxValue);
    };
    // Set the new value and position for the entire bar
    // Set the new value and position for the entire bar
    /**
     * @private
     * @param {?} newMinValue
     * @param {?} newMaxValue
     * @return {?}
     */
    SliderComponent.prototype.positionTrackingBar = 
    // Set the new value and position for the entire bar
    /**
     * @private
     * @param {?} newMinValue
     * @param {?} newMaxValue
     * @return {?}
     */
    function (newMinValue, newMaxValue) {
        if (!ValueHelper.isNullOrUndefined(this.viewOptions.minLimit) &&
            newMinValue < this.viewOptions.minLimit) {
            newMinValue = this.viewOptions.minLimit;
            newMaxValue = MathHelper.roundToPrecisionLimit(newMinValue + this.dragging.difference, this.viewOptions.precisionLimit);
        }
        if (!ValueHelper.isNullOrUndefined(this.viewOptions.maxLimit) &&
            newMaxValue > this.viewOptions.maxLimit) {
            newMaxValue = this.viewOptions.maxLimit;
            newMinValue = MathHelper.roundToPrecisionLimit(newMaxValue - this.dragging.difference, this.viewOptions.precisionLimit);
        }
        this.viewLowValue = newMinValue;
        this.viewHighValue = newMaxValue;
        this.applyViewChange();
        this.updateHandles(PointerType.Min, this.valueToPosition(newMinValue));
        this.updateHandles(PointerType.Max, this.valueToPosition(newMaxValue));
    };
    // Set the new value and position to the current tracking handle
    // Set the new value and position to the current tracking handle
    /**
     * @private
     * @param {?} newValue
     * @return {?}
     */
    SliderComponent.prototype.positionTrackingHandle = 
    // Set the new value and position to the current tracking handle
    /**
     * @private
     * @param {?} newValue
     * @return {?}
     */
    function (newValue) {
        newValue = this.applyMinMaxLimit(newValue);
        if (this.range) {
            if (this.viewOptions.pushRange) {
                newValue = this.applyPushRange(newValue);
            }
            else {
                if (this.viewOptions.noSwitching) {
                    if (this.currentTrackingPointer === PointerType.Min &&
                        newValue > this.viewHighValue) {
                        newValue = this.applyMinMaxRange(this.viewHighValue);
                    }
                    else if (this.currentTrackingPointer === PointerType.Max &&
                        newValue < this.viewLowValue) {
                        newValue = this.applyMinMaxRange(this.viewLowValue);
                    }
                }
                newValue = this.applyMinMaxRange(newValue);
                /* This is to check if we need to switch the min and max handles */
                if (this.currentTrackingPointer === PointerType.Min && newValue > this.viewHighValue) {
                    this.viewLowValue = this.viewHighValue;
                    this.applyViewChange();
                    this.updateHandles(PointerType.Min, this.maxHandleElement.position);
                    this.updateAriaAttributes();
                    this.currentTrackingPointer = PointerType.Max;
                    this.minHandleElement.active = false;
                    this.maxHandleElement.active = true;
                    if (this.viewOptions.keyboardSupport) {
                        this.maxHandleElement.focus();
                    }
                }
                else if (this.currentTrackingPointer === PointerType.Max &&
                    newValue < this.viewLowValue) {
                    this.viewHighValue = this.viewLowValue;
                    this.applyViewChange();
                    this.updateHandles(PointerType.Max, this.minHandleElement.position);
                    this.updateAriaAttributes();
                    this.currentTrackingPointer = PointerType.Min;
                    this.maxHandleElement.active = false;
                    this.minHandleElement.active = true;
                    if (this.viewOptions.keyboardSupport) {
                        this.minHandleElement.focus();
                    }
                }
            }
        }
        if (this.getCurrentTrackingValue() !== newValue) {
            if (this.currentTrackingPointer === PointerType.Min) {
                this.viewLowValue = newValue;
                this.applyViewChange();
            }
            else if (this.currentTrackingPointer === PointerType.Max) {
                this.viewHighValue = newValue;
                this.applyViewChange();
            }
            this.updateHandles(this.currentTrackingPointer, this.valueToPosition(newValue));
            this.updateAriaAttributes();
        }
    };
    /**
     * @private
     * @param {?} newValue
     * @return {?}
     */
    SliderComponent.prototype.applyMinMaxLimit = /**
     * @private
     * @param {?} newValue
     * @return {?}
     */
    function (newValue) {
        if (!ValueHelper.isNullOrUndefined(this.viewOptions.minLimit) && newValue < this.viewOptions.minLimit) {
            return this.viewOptions.minLimit;
        }
        if (!ValueHelper.isNullOrUndefined(this.viewOptions.maxLimit) && newValue > this.viewOptions.maxLimit) {
            return this.viewOptions.maxLimit;
        }
        return newValue;
    };
    /**
     * @private
     * @param {?} newValue
     * @return {?}
     */
    SliderComponent.prototype.applyMinMaxRange = /**
     * @private
     * @param {?} newValue
     * @return {?}
     */
    function (newValue) {
        /** @type {?} */
        var oppositeValue = (this.currentTrackingPointer === PointerType.Min)
            ? this.viewHighValue
            : this.viewLowValue;
        /** @type {?} */
        var difference = Math.abs(newValue - oppositeValue);
        if (!ValueHelper.isNullOrUndefined(this.viewOptions.minRange)) {
            if (difference < this.viewOptions.minRange) {
                if (this.currentTrackingPointer === PointerType.Min) {
                    return MathHelper.roundToPrecisionLimit(this.viewHighValue - this.viewOptions.minRange, this.viewOptions.precisionLimit);
                }
                else if (this.currentTrackingPointer === PointerType.Max) {
                    return MathHelper.roundToPrecisionLimit(this.viewLowValue + this.viewOptions.minRange, this.viewOptions.precisionLimit);
                }
            }
        }
        if (!ValueHelper.isNullOrUndefined(this.viewOptions.maxRange)) {
            if (difference > this.viewOptions.maxRange) {
                if (this.currentTrackingPointer === PointerType.Min) {
                    return MathHelper.roundToPrecisionLimit(this.viewHighValue - this.viewOptions.maxRange, this.viewOptions.precisionLimit);
                }
                else if (this.currentTrackingPointer === PointerType.Max) {
                    return MathHelper.roundToPrecisionLimit(this.viewLowValue + this.viewOptions.maxRange, this.viewOptions.precisionLimit);
                }
            }
        }
        return newValue;
    };
    /**
     * @private
     * @param {?} newValue
     * @return {?}
     */
    SliderComponent.prototype.applyPushRange = /**
     * @private
     * @param {?} newValue
     * @return {?}
     */
    function (newValue) {
        /** @type {?} */
        var difference = (this.currentTrackingPointer === PointerType.Min)
            ? this.viewHighValue - newValue
            : newValue - this.viewLowValue;
        /** @type {?} */
        var minRange = (!ValueHelper.isNullOrUndefined(this.viewOptions.minRange))
            ? this.viewOptions.minRange
            : this.viewOptions.step;
        /** @type {?} */
        var maxRange = this.viewOptions.maxRange;
        // if smaller than minRange
        if (difference < minRange) {
            if (this.currentTrackingPointer === PointerType.Min) {
                this.viewHighValue = MathHelper.roundToPrecisionLimit(Math.min(newValue + minRange, this.viewOptions.ceil), this.viewOptions.precisionLimit);
                newValue = MathHelper.roundToPrecisionLimit(this.viewHighValue - minRange, this.viewOptions.precisionLimit);
                this.applyViewChange();
                this.updateHandles(PointerType.Max, this.valueToPosition(this.viewHighValue));
            }
            else if (this.currentTrackingPointer === PointerType.Max) {
                this.viewLowValue = MathHelper.roundToPrecisionLimit(Math.max(newValue - minRange, this.viewOptions.floor), this.viewOptions.precisionLimit);
                newValue = MathHelper.roundToPrecisionLimit(this.viewLowValue + minRange, this.viewOptions.precisionLimit);
                this.applyViewChange();
                this.updateHandles(PointerType.Min, this.valueToPosition(this.viewLowValue));
            }
            this.updateAriaAttributes();
        }
        else if (!ValueHelper.isNullOrUndefined(maxRange) && difference > maxRange) {
            // if greater than maxRange
            if (this.currentTrackingPointer === PointerType.Min) {
                this.viewHighValue = MathHelper.roundToPrecisionLimit(newValue + maxRange, this.viewOptions.precisionLimit);
                this.applyViewChange();
                this.updateHandles(PointerType.Max, this.valueToPosition(this.viewHighValue));
            }
            else if (this.currentTrackingPointer === PointerType.Max) {
                this.viewLowValue = MathHelper.roundToPrecisionLimit(newValue - maxRange, this.viewOptions.precisionLimit);
                this.applyViewChange();
                this.updateHandles(PointerType.Min, this.valueToPosition(this.viewLowValue));
            }
            this.updateAriaAttributes();
        }
        return newValue;
    };
    /**
     * @private
     * @return {?}
     */
    SliderComponent.prototype.getChangeContext = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var changeContext = new ChangeContext();
        changeContext.pointerType = this.currentTrackingPointer;
        changeContext.value = +this.value;
        if (this.range) {
            changeContext.highValue = +this.highValue;
        }
        return changeContext;
    };
    SliderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-slider',
                    template: "<!-- // 0 Left selection bar outside two handles -->\n<span ngxSliderElement #leftOuterSelectionBar\n  class=\"ngx-slider-span ngx-slider-bar-wrapper ngx-slider-left-out-selection\">\n  <span class=\"ngx-slider-span ngx-slider-bar\"></span>\n</span>\n<!-- // 1 Right selection bar outside two handles -->\n<span ngxSliderElement #rightOuterSelectionBar\n  class=\"ngx-slider-span ngx-slider-bar-wrapper ngx-slider-right-out-selection\">\n  <span class=\"ngx-slider-span ngx-slider-bar\"></span>\n</span>\n<!-- // 2 The whole slider bar -->\n<span ngxSliderElement #fullBar [class.ngx-slider-transparent]=\"fullBarTransparentClass\"\n  class=\"ngx-slider-span ngx-slider-bar-wrapper ngx-slider-full-bar\">\n  <span class=\"ngx-slider-span ngx-slider-bar\"></span>\n</span>\n<!-- // 3 Selection bar between two handles -->\n<span ngxSliderElement #selectionBar [class.ngx-slider-draggable]=\"selectionBarDraggableClass\"\n  class=\"ngx-slider-span ngx-slider-bar-wrapper ngx-slider-selection-bar\">\n  <span class=\"ngx-slider-span ngx-slider-bar ngx-slider-selection\" [ngStyle]=\"barStyle\"></span>\n</span>\n<!-- // 4 Low slider handle -->\n<span ngxSliderHandle #minHandle class=\"ngx-slider-span ngx-slider-pointer ngx-slider-pointer-min\"\n  [ngStyle]=minPointerStyle></span>\n<!-- // 5 High slider handle -->\n<span ngxSliderHandle #maxHandle [style.display]=\"range ? 'inherit' : 'none'\"\n  class=\"ngx-slider-span ngx-slider-pointer ngx-slider-pointer-max\" [ngStyle]=maxPointerStyle></span>\n<!-- // 6 Floor label -->\n<span ngxSliderLabel #floorLabel class=\"ngx-slider-span ngx-slider-bubble ngx-slider-limit ngx-slider-floor\"></span>\n<!-- // 7 Ceiling label -->\n<span ngxSliderLabel #ceilLabel class=\"ngx-slider-span ngx-slider-bubble ngx-slider-limit ngx-slider-ceil\"></span>\n<!-- // 8 Label above the low slider handle -->\n<span ngxSliderLabel #minHandleLabel class=\"ngx-slider-span ngx-slider-bubble ngx-slider-model-value\"></span>\n<!-- // 9 Label above the high slider handle -->\n<span ngxSliderLabel #maxHandleLabel class=\"ngx-slider-span ngx-slider-bubble ngx-slider-model-high\"></span>\n<!-- // 10 Combined range label when the slider handles are close ex. 15 - 17 -->\n<span ngxSliderLabel #combinedLabel class=\"ngx-slider-span ngx-slider-bubble ngx-slider-combined\"></span>\n<!-- // 11 The ticks -->\n<span ngxSliderElement #ticksElement [hidden]=\"!showTicks\" [class.ngx-slider-ticks-values-under]=\"ticksUnderValuesClass\"\n  class=\"ngx-slider-ticks\">\n  <span *ngFor=\"let t of ticks\" class=\"ngx-slider-tick\" [ngClass]=\"{'ngx-slider-selected': t.selected}\"\n    [ngStyle]=\"t.style\">\n    <ngx-slider-tooltip-wrapper [template]=\"tooltipTemplate\" [tooltip]=\"t.tooltip\" [placement]=\"t.tooltipPlacement\">\n    </ngx-slider-tooltip-wrapper>\n    <ngx-slider-tooltip-wrapper *ngIf=\"t.value != null\" class=\"ngx-slider-span ngx-slider-tick-value\"\n      [template]=\"tooltipTemplate\" [tooltip]=\"t.valueTooltip\" [placement]=\"t.valueTooltipPlacement\" [content]=\"t.value\">\n    </ngx-slider-tooltip-wrapper>\n    <span *ngIf=\"t.legend != null\" class=\"ngx-slider-span ngx-slider-tick-legend\" [innerHTML]=\"t.legend\"></span>\n  </span>\n</span>\n",
                    // tslint:disable-next-line: no-host-metadata-property
                    host: { class: 'ngx-slider' },
                    providers: [NGX_SLIDER_CONTROL_VALUE_ACCESSOR],
                    styles: ["::ng-deep .ngx-slider{display:inline-block;position:relative;height:4px;width:100%;margin:35px 0 15px;vertical-align:middle;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;touch-action:pan-y}::ng-deep .ngx-slider.with-legend{margin-bottom:40px}::ng-deep .ngx-slider[disabled]{cursor:not-allowed}::ng-deep .ngx-slider[disabled] .ngx-slider-pointer{cursor:not-allowed;background-color:#d8e0f3}::ng-deep .ngx-slider[disabled] .ngx-slider-draggable{cursor:not-allowed}::ng-deep .ngx-slider[disabled] .ngx-slider-selection{background:#8b91a2}::ng-deep .ngx-slider[disabled] .ngx-slider-tick{cursor:not-allowed}::ng-deep .ngx-slider[disabled] .ngx-slider-tick.ngx-slider-selected{background:#8b91a2}::ng-deep .ngx-slider .ngx-slider-span{white-space:nowrap;position:absolute;display:inline-block}::ng-deep .ngx-slider .ngx-slider-base{width:100%;height:100%;padding:0}::ng-deep .ngx-slider .ngx-slider-bar-wrapper{left:0;box-sizing:border-box;margin-top:-16px;padding-top:16px;width:100%;height:32px;z-index:1}::ng-deep .ngx-slider .ngx-slider-draggable{cursor:move}::ng-deep .ngx-slider .ngx-slider-bar{left:0;width:100%;height:4px;z-index:1;background:#d8e0f3;border-radius:2px}::ng-deep .ngx-slider .ngx-slider-bar-wrapper.ngx-slider-transparent .ngx-slider-bar{background:0 0}::ng-deep .ngx-slider .ngx-slider-bar-wrapper.ngx-slider-left-out-selection .ngx-slider-bar{background:#df002d}::ng-deep .ngx-slider .ngx-slider-bar-wrapper.ngx-slider-right-out-selection .ngx-slider-bar{background:#03a688}::ng-deep .ngx-slider .ngx-slider-selection{z-index:2;background:#0db9f0;border-radius:2px}::ng-deep .ngx-slider .ngx-slider-pointer{cursor:pointer;width:32px;height:32px;top:-14px;background-color:#0db9f0;z-index:3;border-radius:16px}::ng-deep .ngx-slider .ngx-slider-pointer:after{content:'';width:8px;height:8px;position:absolute;top:12px;left:12px;border-radius:4px;background:#fff}::ng-deep .ngx-slider .ngx-slider-pointer:hover:after{background-color:#fff}::ng-deep .ngx-slider .ngx-slider-pointer.ngx-slider-active{z-index:4}::ng-deep .ngx-slider .ngx-slider-pointer.ngx-slider-active:after{background-color:#451aff}::ng-deep .ngx-slider .ngx-slider-bubble{cursor:default;bottom:16px;padding:1px 3px;color:#55637d;font-size:16px}::ng-deep .ngx-slider .ngx-slider-bubble.ngx-slider-limit{color:#55637d}::ng-deep .ngx-slider .ngx-slider-ticks{box-sizing:border-box;width:100%;height:0;position:absolute;left:0;top:-3px;margin:0;z-index:1;list-style:none}::ng-deep .ngx-slider .ngx-slider-ticks-values-under .ngx-slider-tick-value{top:auto;bottom:-36px}::ng-deep .ngx-slider .ngx-slider-tick{text-align:center;cursor:pointer;width:10px;height:10px;background:#d8e0f3;border-radius:50%;position:absolute;top:0;left:0;margin-left:11px}::ng-deep .ngx-slider .ngx-slider-tick.ngx-slider-selected{background:#0db9f0}::ng-deep .ngx-slider .ngx-slider-tick-value{position:absolute;top:-34px;-webkit-transform:translate(-50%,0);transform:translate(-50%,0)}::ng-deep .ngx-slider .ngx-slider-tick-legend{position:absolute;top:24px;-webkit-transform:translate(-50%,0);transform:translate(-50%,0);max-width:50px;white-space:normal}::ng-deep .ngx-slider.vertical{position:relative;width:4px;height:100%;margin:0 20px;padding:0;vertical-align:baseline;touch-action:pan-x}::ng-deep .ngx-slider.vertical .ngx-slider-base{width:100%;height:100%;padding:0}::ng-deep .ngx-slider.vertical .ngx-slider-bar-wrapper{top:auto;left:0;margin:0 0 0 -16px;padding:0 0 0 16px;height:100%;width:32px}::ng-deep .ngx-slider.vertical .ngx-slider-bar{bottom:0;left:auto;width:4px;height:100%}::ng-deep .ngx-slider.vertical .ngx-slider-pointer{left:-14px!important;top:auto;bottom:0}::ng-deep .ngx-slider.vertical .ngx-slider-bubble{left:16px!important;bottom:0}::ng-deep .ngx-slider.vertical .ngx-slider-ticks{height:100%;width:0;left:-3px;top:0;z-index:1}::ng-deep .ngx-slider.vertical .ngx-slider-tick{vertical-align:middle;margin-left:auto;margin-top:11px}::ng-deep .ngx-slider.vertical .ngx-slider-tick-value{left:24px;top:auto;-webkit-transform:translate(0,-28%);transform:translate(0,-28%)}::ng-deep .ngx-slider.vertical .ngx-slider-tick-legend{top:auto;right:24px;-webkit-transform:translate(0,-28%);transform:translate(0,-28%);max-width:none;white-space:nowrap}::ng-deep .ngx-slider.vertical .ngx-slider-ticks-values-under .ngx-slider-tick-value{bottom:auto;left:auto;right:24px}::ng-deep .ngx-slider *{-webkit-transition:none;transition:none}::ng-deep .ngx-slider.animate .ngx-slider-bar-wrapper{-webkit-transition:.3s linear;transition:.3s linear}::ng-deep .ngx-slider.animate .ngx-slider-selection{-webkit-transition:background-color .3s linear;transition:background-color .3s linear}::ng-deep .ngx-slider.animate .ngx-slider-pointer{-webkit-transition:.3s linear;transition:.3s linear}::ng-deep .ngx-slider.animate .ngx-slider-bubble{-webkit-transition:.3s linear;transition:.3s linear}::ng-deep .ngx-slider.animate .ngx-slider-bubble.ngx-slider-limit{-webkit-transition:opacity .3s linear;transition:opacity .3s linear}::ng-deep .ngx-slider.animate .ngx-slider-bubble.ngx-slider-combined{-webkit-transition:opacity .3s linear;transition:opacity .3s linear}::ng-deep .ngx-slider.animate .ngx-slider-tick{-webkit-transition:background-color .3s linear;transition:background-color .3s linear}"]
                }] }
    ];
    /** @nocollapse */
    SliderComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: NgZone }
    ]; };
    SliderComponent.propDecorators = {
        value: [{ type: Input }],
        valueChange: [{ type: Output }],
        highValue: [{ type: Input }],
        highValueChange: [{ type: Output }],
        options: [{ type: Input }],
        userChangeStart: [{ type: Output }],
        userChange: [{ type: Output }],
        userChangeEnd: [{ type: Output }],
        manualRefresh: [{ type: Input }],
        triggerFocus: [{ type: Input }],
        leftOuterSelectionBarElement: [{ type: ViewChild, args: ['leftOuterSelectionBar', { read: SliderElementDirective, static: false },] }],
        rightOuterSelectionBarElement: [{ type: ViewChild, args: ['rightOuterSelectionBar', { read: SliderElementDirective, static: false },] }],
        fullBarElement: [{ type: ViewChild, args: ['fullBar', { read: SliderElementDirective, static: false },] }],
        selectionBarElement: [{ type: ViewChild, args: ['selectionBar', { read: SliderElementDirective, static: false },] }],
        minHandleElement: [{ type: ViewChild, args: ['minHandle', { read: SliderHandleDirective, static: false },] }],
        maxHandleElement: [{ type: ViewChild, args: ['maxHandle', { read: SliderHandleDirective, static: false },] }],
        floorLabelElement: [{ type: ViewChild, args: ['floorLabel', { read: SliderLabelDirective, static: false },] }],
        ceilLabelElement: [{ type: ViewChild, args: ['ceilLabel', { read: SliderLabelDirective, static: false },] }],
        minHandleLabelElement: [{ type: ViewChild, args: ['minHandleLabel', { read: SliderLabelDirective, static: false },] }],
        maxHandleLabelElement: [{ type: ViewChild, args: ['maxHandleLabel', { read: SliderLabelDirective, static: false },] }],
        combinedLabelElement: [{ type: ViewChild, args: ['combinedLabel', { read: SliderLabelDirective, static: false },] }],
        ticksElement: [{ type: ViewChild, args: ['ticksElement', { read: SliderElementDirective, static: false },] }],
        tooltipTemplate: [{ type: ContentChild, args: ['tooltipTemplate', { static: false },] }],
        sliderElementVerticalClass: [{ type: HostBinding, args: ['class.vertical',] }],
        sliderElementAnimateClass: [{ type: HostBinding, args: ['class.animate',] }],
        sliderElementDisabledAttr: [{ type: HostBinding, args: ['attr.disabled',] }],
        onResize: [{ type: HostListener, args: ['window:resize', ['$event'],] }]
    };
    return SliderComponent;
}());
export { SliderComponent };
if (false) {
    /** @type {?} */
    SliderComponent.prototype.value;
    /** @type {?} */
    SliderComponent.prototype.valueChange;
    /** @type {?} */
    SliderComponent.prototype.highValue;
    /** @type {?} */
    SliderComponent.prototype.highValueChange;
    /** @type {?} */
    SliderComponent.prototype.options;
    /** @type {?} */
    SliderComponent.prototype.userChangeStart;
    /** @type {?} */
    SliderComponent.prototype.userChange;
    /** @type {?} */
    SliderComponent.prototype.userChangeEnd;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype.manualRefreshSubscription;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype.triggerFocusSubscription;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype.initHasRun;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype.inputModelChangeSubject;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype.inputModelChangeSubscription;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype.outputModelChangeSubject;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype.outputModelChangeSubscription;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype.viewLowValue;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype.viewHighValue;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype.viewOptions;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype.handleHalfDimension;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype.maxHandlePosition;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype.currentTrackingPointer;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype.currentFocusPointer;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype.firstKeyDown;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype.touchId;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype.dragging;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype.leftOuterSelectionBarElement;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype.rightOuterSelectionBarElement;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype.fullBarElement;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype.selectionBarElement;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype.minHandleElement;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype.maxHandleElement;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype.floorLabelElement;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype.ceilLabelElement;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype.minHandleLabelElement;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype.maxHandleLabelElement;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype.combinedLabelElement;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype.ticksElement;
    /** @type {?} */
    SliderComponent.prototype.tooltipTemplate;
    /** @type {?} */
    SliderComponent.prototype.sliderElementVerticalClass;
    /** @type {?} */
    SliderComponent.prototype.sliderElementAnimateClass;
    /** @type {?} */
    SliderComponent.prototype.sliderElementDisabledAttr;
    /** @type {?} */
    SliderComponent.prototype.barStyle;
    /** @type {?} */
    SliderComponent.prototype.minPointerStyle;
    /** @type {?} */
    SliderComponent.prototype.maxPointerStyle;
    /** @type {?} */
    SliderComponent.prototype.fullBarTransparentClass;
    /** @type {?} */
    SliderComponent.prototype.selectionBarDraggableClass;
    /** @type {?} */
    SliderComponent.prototype.ticksUnderValuesClass;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype.intermediateTicks;
    /** @type {?} */
    SliderComponent.prototype.ticks;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype.eventListenerHelper;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype.onMoveEventListener;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype.onEndEventListener;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype.resizeObserver;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype.onTouchedCallback;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype.onChangeCallback;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype.changeDetectionRef;
    /**
     * @type {?}
     * @private
     */
    SliderComponent.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,