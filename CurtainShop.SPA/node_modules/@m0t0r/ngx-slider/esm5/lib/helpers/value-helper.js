/**
 * @fileoverview added by tsickle
 * Generated from: lib/helpers/value-helper.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 *  Collection of functions to handle conversions/lookups of values
 */
var /**
 *  Collection of functions to handle conversions/lookups of values
 */
ValueHelper = /** @class */ (function () {
    function ValueHelper() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    ValueHelper.isNullOrUndefined = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value === undefined || value === null;
    };
    /**
     * @param {?} val
     * @param {?} minVal
     * @param {?} maxVal
     * @return {?}
     */
    ValueHelper.linearValueToPosition = /**
     * @param {?} val
     * @param {?} minVal
     * @param {?} maxVal
     * @return {?}
     */
    function (val, minVal, maxVal) {
        /** @type {?} */
        var range = maxVal - minVal;
        return (val - minVal) / range;
    };
    /**
     * @param {?} val
     * @param {?} minVal
     * @param {?} maxVal
     * @return {?}
     */
    ValueHelper.logValueToPosition = /**
     * @param {?} val
     * @param {?} minVal
     * @param {?} maxVal
     * @return {?}
     */
    function (val, minVal, maxVal) {
        val = Math.log(val);
        minVal = Math.log(minVal);
        maxVal = Math.log(maxVal);
        /** @type {?} */
        var range = maxVal - minVal;
        return (val - minVal) / range;
    };
    /**
     * @param {?} percent
     * @param {?} minVal
     * @param {?} maxVal
     * @return {?}
     */
    ValueHelper.linearPositionToValue = /**
     * @param {?} percent
     * @param {?} minVal
     * @param {?} maxVal
     * @return {?}
     */
    function (percent, minVal, maxVal) {
        return percent * (maxVal - minVal) + minVal;
    };
    /**
     * @param {?} percent
     * @param {?} minVal
     * @param {?} maxVal
     * @return {?}
     */
    ValueHelper.logPositionToValue = /**
     * @param {?} percent
     * @param {?} minVal
     * @param {?} maxVal
     * @return {?}
     */
    function (percent, minVal, maxVal) {
        minVal = Math.log(minVal);
        maxVal = Math.log(maxVal);
        /** @type {?} */
        var value = percent * (maxVal - minVal) + minVal;
        return Math.exp(value);
    };
    /**
     * @param {?} modelValue
     * @param {?} stepsArray
     * @return {?}
     */
    ValueHelper.findStepIndex = /**
     * @param {?} modelValue
     * @param {?} stepsArray
     * @return {?}
     */
    function (modelValue, stepsArray) {
        /** @type {?} */
        var differences = stepsArray.map((/**
         * @param {?} step
         * @return {?}
         */
        function (step) { return Math.abs(modelValue - step.value); }));
        /** @type {?} */
        var minDifferenceIndex = 0;
        for (var index = 0; index < stepsArray.length; index++) {
            if (differences[index] !== differences[minDifferenceIndex] && differences[index] < differences[minDifferenceIndex]) {
                minDifferenceIndex = index;
            }
        }
        return minDifferenceIndex;
    };
    return ValueHelper;
}());
/**
 *  Collection of functions to handle conversions/lookups of values
 */
export { ValueHelper };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsdWUtaGVscGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG0wdDByL25neC1zbGlkZXIvIiwic291cmNlcyI6WyJsaWIvaGVscGVycy92YWx1ZS1oZWxwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFLQTs7OztJQUFBO0lBeUNBLENBQUM7Ozs7O0lBeENRLDZCQUFpQjs7OztJQUF4QixVQUF5QixLQUFVO1FBQ2pDLE9BQU8sS0FBSyxLQUFLLFNBQVMsSUFBSSxLQUFLLEtBQUssSUFBSSxDQUFDO0lBQy9DLENBQUM7Ozs7Ozs7SUFFTSxpQ0FBcUI7Ozs7OztJQUE1QixVQUE2QixHQUFXLEVBQUUsTUFBYyxFQUFFLE1BQWM7O1lBQ2hFLEtBQUssR0FBVyxNQUFNLEdBQUcsTUFBTTtRQUNyQyxPQUFPLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQztJQUNoQyxDQUFDOzs7Ozs7O0lBRU0sOEJBQWtCOzs7Ozs7SUFBekIsVUFBMEIsR0FBVyxFQUFFLE1BQWMsRUFBRSxNQUFjO1FBQ25FLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3BCLE1BQU0sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFCLE1BQU0sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDOztZQUNwQixLQUFLLEdBQVcsTUFBTSxHQUFHLE1BQU07UUFDckMsT0FBTyxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUM7SUFDaEMsQ0FBQzs7Ozs7OztJQUVNLGlDQUFxQjs7Ozs7O0lBQTVCLFVBQTZCLE9BQWUsRUFBRSxNQUFjLEVBQUUsTUFBYztRQUMxRSxPQUFPLE9BQU8sR0FBRyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUM7SUFDOUMsQ0FBQzs7Ozs7OztJQUVNLDhCQUFrQjs7Ozs7O0lBQXpCLFVBQTBCLE9BQWUsRUFBRSxNQUFjLEVBQUUsTUFBYztRQUN2RSxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMxQixNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQzs7WUFDcEIsS0FBSyxHQUFXLE9BQU8sR0FBRyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxNQUFNO1FBQzFELE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN6QixDQUFDOzs7Ozs7SUFFTSx5QkFBYTs7Ozs7SUFBcEIsVUFBcUIsVUFBa0IsRUFBRSxVQUFrQzs7WUFDbkUsV0FBVyxHQUFhLFVBQVUsQ0FBQyxHQUFHOzs7O1FBQUMsVUFBQyxJQUEwQixJQUFhLE9BQUEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFqQyxDQUFpQyxFQUFDOztZQUVuSCxrQkFBa0IsR0FBRyxDQUFDO1FBQzFCLEtBQUssSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRyxVQUFVLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ3RELElBQUksV0FBVyxDQUFDLEtBQUssQ0FBQyxLQUFLLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxXQUFXLENBQUMsa0JBQWtCLENBQUMsRUFBRTtnQkFDbEgsa0JBQWtCLEdBQUcsS0FBSyxDQUFDO2FBQzVCO1NBQ0Y7UUFFRCxPQUFPLGtCQUFrQixDQUFDO0lBQzVCLENBQUM7SUFDSCxrQkFBQztBQUFELENBQUMsQUF6Q0QsSUF5Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDdXN0b21TdGVwRGVmaW5pdGlvbiB9IGZyb20gJy4uL2ludGVyZmFjZXMvb3B0aW9ucyc7XG5cbi8qKlxuICogIENvbGxlY3Rpb24gb2YgZnVuY3Rpb25zIHRvIGhhbmRsZSBjb252ZXJzaW9ucy9sb29rdXBzIG9mIHZhbHVlc1xuICovXG5leHBvcnQgY2xhc3MgVmFsdWVIZWxwZXIge1xuICBzdGF0aWMgaXNOdWxsT3JVbmRlZmluZWQodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBudWxsO1xuICB9XG5cbiAgc3RhdGljIGxpbmVhclZhbHVlVG9Qb3NpdGlvbih2YWw6IG51bWJlciwgbWluVmFsOiBudW1iZXIsIG1heFZhbDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBjb25zdCByYW5nZTogbnVtYmVyID0gbWF4VmFsIC0gbWluVmFsO1xuICAgIHJldHVybiAodmFsIC0gbWluVmFsKSAvIHJhbmdlO1xuICB9XG5cbiAgc3RhdGljIGxvZ1ZhbHVlVG9Qb3NpdGlvbih2YWw6IG51bWJlciwgbWluVmFsOiBudW1iZXIsIG1heFZhbDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICB2YWwgPSBNYXRoLmxvZyh2YWwpO1xuICAgIG1pblZhbCA9IE1hdGgubG9nKG1pblZhbCk7XG4gICAgbWF4VmFsID0gTWF0aC5sb2cobWF4VmFsKTtcbiAgICBjb25zdCByYW5nZTogbnVtYmVyID0gbWF4VmFsIC0gbWluVmFsO1xuICAgIHJldHVybiAodmFsIC0gbWluVmFsKSAvIHJhbmdlO1xuICB9XG5cbiAgc3RhdGljIGxpbmVhclBvc2l0aW9uVG9WYWx1ZShwZXJjZW50OiBudW1iZXIsIG1pblZhbDogbnVtYmVyLCBtYXhWYWw6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIHBlcmNlbnQgKiAobWF4VmFsIC0gbWluVmFsKSArIG1pblZhbDtcbiAgfVxuXG4gIHN0YXRpYyBsb2dQb3NpdGlvblRvVmFsdWUocGVyY2VudDogbnVtYmVyLCBtaW5WYWw6IG51bWJlciwgbWF4VmFsOiBudW1iZXIpOiBudW1iZXIge1xuICAgIG1pblZhbCA9IE1hdGgubG9nKG1pblZhbCk7XG4gICAgbWF4VmFsID0gTWF0aC5sb2cobWF4VmFsKTtcbiAgICBjb25zdCB2YWx1ZTogbnVtYmVyID0gcGVyY2VudCAqIChtYXhWYWwgLSBtaW5WYWwpICsgbWluVmFsO1xuICAgIHJldHVybiBNYXRoLmV4cCh2YWx1ZSk7XG4gIH1cblxuICBzdGF0aWMgZmluZFN0ZXBJbmRleChtb2RlbFZhbHVlOiBudW1iZXIsIHN0ZXBzQXJyYXk6IEN1c3RvbVN0ZXBEZWZpbml0aW9uW10pOiBudW1iZXIge1xuICAgIGNvbnN0IGRpZmZlcmVuY2VzOiBudW1iZXJbXSA9IHN0ZXBzQXJyYXkubWFwKChzdGVwOiBDdXN0b21TdGVwRGVmaW5pdGlvbik6IG51bWJlciA9PiBNYXRoLmFicyhtb2RlbFZhbHVlIC0gc3RlcC52YWx1ZSkpO1xuXG4gICAgbGV0IG1pbkRpZmZlcmVuY2VJbmRleCA9IDA7XG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHN0ZXBzQXJyYXkubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBpZiAoZGlmZmVyZW5jZXNbaW5kZXhdICE9PSBkaWZmZXJlbmNlc1ttaW5EaWZmZXJlbmNlSW5kZXhdICYmIGRpZmZlcmVuY2VzW2luZGV4XSA8IGRpZmZlcmVuY2VzW21pbkRpZmZlcmVuY2VJbmRleF0pIHtcbiAgICAgICAgbWluRGlmZmVyZW5jZUluZGV4ID0gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1pbkRpZmZlcmVuY2VJbmRleDtcbiAgfVxufVxuIl19