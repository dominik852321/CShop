/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/slider-element.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __values } from "tslib";
// tslint:disable: variable-name
import { Directive, ElementRef, Renderer2, HostBinding } from '@angular/core';
import { EventListenerHelper } from '../helpers/event-listener-helper';
import { ValueHelper } from '../helpers/value-helper';
var SliderElementDirective = /** @class */ (function () {
    function SliderElementDirective(elemRef, renderer) {
        this.elemRef = elemRef;
        this.renderer = renderer;
        this._position = 0;
        this._dimension = 0;
        this._alwaysHide = false;
        this._vertical = false;
        this._scale = 1;
        this.opacity = 1;
        this.visibility = 'visible';
        this.left = '';
        this.bottom = '';
        this.height = '';
        this.width = '';
        this.eventListeners = [];
        this.eventListenerHelper = new EventListenerHelper(this.renderer);
    }
    Object.defineProperty(SliderElementDirective.prototype, "position", {
        get: /**
         * @return {?}
         */
        function () {
            return this._position;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderElementDirective.prototype, "dimension", {
        get: /**
         * @return {?}
         */
        function () {
            return this._dimension;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderElementDirective.prototype, "alwaysHide", {
        get: /**
         * @return {?}
         */
        function () {
            return this._alwaysHide;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderElementDirective.prototype, "vertical", {
        get: /**
         * @return {?}
         */
        function () {
            return this._vertical;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderElementDirective.prototype, "scale", {
        get: /**
         * @return {?}
         */
        function () {
            return this._scale;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} hide
     * @return {?}
     */
    SliderElementDirective.prototype.setAlwaysHide = /**
     * @param {?} hide
     * @return {?}
     */
    function (hide) {
        this._alwaysHide = hide;
        if (hide) {
            this.visibility = 'hidden';
        }
        else {
            this.visibility = 'visible';
        }
    };
    /**
     * @return {?}
     */
    SliderElementDirective.prototype.hide = /**
     * @return {?}
     */
    function () {
        this.opacity = 0;
    };
    /**
     * @return {?}
     */
    SliderElementDirective.prototype.show = /**
     * @return {?}
     */
    function () {
        if (this.alwaysHide) {
            return;
        }
        this.opacity = 1;
    };
    /**
     * @return {?}
     */
    SliderElementDirective.prototype.isVisible = /**
     * @return {?}
     */
    function () {
        if (this.alwaysHide) {
            return false;
        }
        return this.opacity !== 0;
    };
    /**
     * @param {?} vertical
     * @return {?}
     */
    SliderElementDirective.prototype.setVertical = /**
     * @param {?} vertical
     * @return {?}
     */
    function (vertical) {
        this._vertical = vertical;
        if (this._vertical) {
            this.left = '';
            this.width = '';
        }
        else {
            this.bottom = '';
            this.height = '';
        }
    };
    /**
     * @param {?} scale
     * @return {?}
     */
    SliderElementDirective.prototype.setScale = /**
     * @param {?} scale
     * @return {?}
     */
    function (scale) {
        this._scale = scale;
    };
    // Set element left/top position depending on whether slider is horizontal or vertical
    // Set element left/top position depending on whether slider is horizontal or vertical
    /**
     * @param {?} pos
     * @return {?}
     */
    SliderElementDirective.prototype.setPosition = 
    // Set element left/top position depending on whether slider is horizontal or vertical
    /**
     * @param {?} pos
     * @return {?}
     */
    function (pos) {
        this._position = pos;
        if (this._vertical) {
            this.bottom = Math.round(pos) + 'px';
        }
        else {
            this.left = Math.round(pos) + 'px';
        }
    };
    // Calculate element's width/height depending on whether slider is horizontal or vertical
    // Calculate element's width/height depending on whether slider is horizontal or vertical
    /**
     * @return {?}
     */
    SliderElementDirective.prototype.calculateDimension = 
    // Calculate element's width/height depending on whether slider is horizontal or vertical
    /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var val = this.getBoundingClientRect();
        if (this.vertical) {
            this._dimension = (val.bottom - val.top) * this.scale;
        }
        else {
            this._dimension = (val.right - val.left) * this.scale;
        }
    };
    // Set element width/height depending on whether slider is horizontal or vertical
    // Set element width/height depending on whether slider is horizontal or vertical
    /**
     * @param {?} dim
     * @return {?}
     */
    SliderElementDirective.prototype.setDimension = 
    // Set element width/height depending on whether slider is horizontal or vertical
    /**
     * @param {?} dim
     * @return {?}
     */
    function (dim) {
        this._dimension = dim;
        if (this._vertical) {
            this.height = Math.round(dim) + 'px';
        }
        else {
            this.width = Math.round(dim) + 'px';
        }
    };
    /**
     * @return {?}
     */
    SliderElementDirective.prototype.getBoundingClientRect = /**
     * @return {?}
     */
    function () {
        return this.elemRef.nativeElement.getBoundingClientRect();
    };
    /**
     * @param {?} eventName
     * @param {?} callback
     * @param {?=} debounceInterval
     * @return {?}
     */
    SliderElementDirective.prototype.on = /**
     * @param {?} eventName
     * @param {?} callback
     * @param {?=} debounceInterval
     * @return {?}
     */
    function (eventName, callback, debounceInterval) {
        /** @type {?} */
        var listener = this.eventListenerHelper.attachEventListener(this.elemRef.nativeElement, eventName, callback, debounceInterval);
        this.eventListeners.push(listener);
    };
    /**
     * @param {?} eventName
     * @param {?} callback
     * @param {?=} debounceInterval
     * @return {?}
     */
    SliderElementDirective.prototype.onPassive = /**
     * @param {?} eventName
     * @param {?} callback
     * @param {?=} debounceInterval
     * @return {?}
     */
    function (eventName, callback, debounceInterval) {
        /** @type {?} */
        var listener = this.eventListenerHelper.attachPassiveEventListener(this.elemRef.nativeElement, eventName, callback, debounceInterval);
        this.eventListeners.push(listener);
    };
    /**
     * @param {?=} eventName
     * @return {?}
     */
    SliderElementDirective.prototype.off = /**
     * @param {?=} eventName
     * @return {?}
     */
    function (eventName) {
        var e_1, _a;
        /** @type {?} */
        var listenersToKeep;
        /** @type {?} */
        var listenersToRemove;
        if (!ValueHelper.isNullOrUndefined(eventName)) {
            listenersToKeep = this.eventListeners.filter((/**
             * @param {?} event
             * @return {?}
             */
            function (event) { return event.eventName !== eventName; }));
            listenersToRemove = this.eventListeners.filter((/**
             * @param {?} event
             * @return {?}
             */
            function (event) { return event.eventName === eventName; }));
        }
        else {
            listenersToKeep = [];
            listenersToRemove = this.eventListeners;
        }
        try {
            for (var listenersToRemove_1 = __values(listenersToRemove), listenersToRemove_1_1 = listenersToRemove_1.next(); !listenersToRemove_1_1.done; listenersToRemove_1_1 = listenersToRemove_1.next()) {
                var listener = listenersToRemove_1_1.value;
                this.eventListenerHelper.detachEventListener(listener);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (listenersToRemove_1_1 && !listenersToRemove_1_1.done && (_a = listenersToRemove_1.return)) _a.call(listenersToRemove_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.eventListeners = listenersToKeep;
    };
    SliderElementDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ngxSliderElement]'
                },] }
    ];
    /** @nocollapse */
    SliderElementDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    SliderElementDirective.propDecorators = {
        opacity: [{ type: HostBinding, args: ['style.opacity',] }],
        visibility: [{ type: HostBinding, args: ['style.visibility',] }],
        left: [{ type: HostBinding, args: ['style.left',] }],
        bottom: [{ type: HostBinding, args: ['style.bottom',] }],
        height: [{ type: HostBinding, args: ['style.height',] }],
        width: [{ type: HostBinding, args: ['style.width',] }]
    };
    return SliderElementDirective;
}());
export { SliderElementDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    SliderElementDirective.prototype._position;
    /**
     * @type {?}
     * @private
     */
    SliderElementDirective.prototype._dimension;
    /**
     * @type {?}
     * @private
     */
    SliderElementDirective.prototype._alwaysHide;
    /**
     * @type {?}
     * @private
     */
    SliderElementDirective.prototype._vertical;
    /**
     * @type {?}
     * @private
     */
    SliderElementDirective.prototype._scale;
    /** @type {?} */
    SliderElementDirective.prototype.opacity;
    /** @type {?} */
    SliderElementDirective.prototype.visibility;
    /** @type {?} */
    SliderElementDirective.prototype.left;
    /** @type {?} */
    SliderElementDirective.prototype.bottom;
    /** @type {?} */
    SliderElementDirective.prototype.height;
    /** @type {?} */
    SliderElementDirective.prototype.width;
    /**
     * @type {?}
     * @private
     */
    SliderElementDirective.prototype.eventListenerHelper;
    /**
     * @type {?}
     * @private
     */
    SliderElementDirective.prototype.eventListeners;
    /**
     * @type {?}
     * @protected
     */
    SliderElementDirective.prototype.elemRef;
    /**
     * @type {?}
     * @protected
     */
    SliderElementDirective.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,