{"version":3,"file":"slider.component.d.ts","sources":["slider.component.d.ts"],"names":[],"mappingssourcesContent":["import { OnInit, AfterViewInit, OnChanges, OnDestroy, ElementRef, Renderer2, EventEmitter, TemplateRef, ChangeDetectorRef, SimpleChanges, NgZone } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { Options } from '../interfaces/options';\nimport { ChangeContext } from '../interfaces/change-context';\nexport declare class Tick {\n    selected: boolean;\n    style: any;\n    tooltip: string;\n    tooltipPlacement: string;\n    value: string;\n    valueTooltip: string;\n    valueTooltipPlacement: string;\n    legend: string;\n}\nexport declare class SliderComponent implements OnInit, AfterViewInit, OnChanges, OnDestroy, ControlValueAccessor {\n    private renderer;\n    private elementRef;\n    private changeDetectionRef;\n    private zone;\n    value: number;\n    valueChange: EventEmitter<number>;\n    highValue: number;\n    highValueChange: EventEmitter<number>;\n    options: Options;\n    userChangeStart: EventEmitter<ChangeContext>;\n    userChange: EventEmitter<ChangeContext>;\n    userChangeEnd: EventEmitter<ChangeContext>;\n    private manualRefreshSubscription;\n    set manualRefresh(manualRefresh: EventEmitter<void>);\n    private triggerFocusSubscription;\n    set triggerFocus(triggerFocus: EventEmitter<void>);\n    get range(): boolean;\n    private initHasRun;\n    private inputModelChangeSubject;\n    private inputModelChangeSubscription;\n    private outputModelChangeSubject;\n    private outputModelChangeSubscription;\n    private viewLowValue;\n    private viewHighValue;\n    private viewOptions;\n    private handleHalfDimension;\n    private maxHandlePosition;\n    private currentTrackingPointer;\n    private currentFocusPointer;\n    private firstKeyDown;\n    private touchId;\n    private dragging;\n    private leftOuterSelectionBarElement;\n    private rightOuterSelectionBarElement;\n    private fullBarElement;\n    private selectionBarElement;\n    private minHandleElement;\n    private maxHandleElement;\n    private floorLabelElement;\n    private ceilLabelElement;\n    private minHandleLabelElement;\n    private maxHandleLabelElement;\n    private combinedLabelElement;\n    private ticksElement;\n    tooltipTemplate: TemplateRef<any>;\n    sliderElementVerticalClass: boolean;\n    sliderElementAnimateClass: boolean;\n    sliderElementDisabledAttr: string;\n    barStyle: any;\n    minPointerStyle: any;\n    maxPointerStyle: any;\n    fullBarTransparentClass: boolean;\n    selectionBarDraggableClass: boolean;\n    ticksUnderValuesClass: boolean;\n    get showTicks(): boolean;\n    private intermediateTicks;\n    ticks: Tick[];\n    private eventListenerHelper;\n    private onMoveEventListener;\n    private onEndEventListener;\n    private resizeObserver;\n    private onTouchedCallback;\n    private onChangeCallback;\n    constructor(renderer: Renderer2, elementRef: ElementRef, changeDetectionRef: ChangeDetectorRef, zone: NgZone);\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    writeValue(obj: any): void;\n    registerOnChange(onChangeCallback: any): void;\n    registerOnTouched(onTouchedCallback: any): void;\n    setDisabledState(isDisabled: boolean): void;\n    onResize(event: any): void;\n    private subscribeInputModelChangeSubject;\n    private subscribeOutputModelChangeSubject;\n    private subscribeResizeObserver;\n    private unsubscribeResizeObserver;\n    private unsubscribeOnMove;\n    private unsubscribeOnEnd;\n    private unsubscribeInputModelChangeSubject;\n    private unsubscribeOutputModelChangeSubject;\n    private unsubscribeManualRefresh;\n    private unsubscribeTriggerFocus;\n    private getPointerElement;\n    private getCurrentTrackingValue;\n    private modelValueToViewValue;\n    private viewValueToModelValue;\n    private getStepValue;\n    private applyViewChange;\n    private applyInputModelChange;\n    private publishOutputModelChange;\n    private normaliseModelValues;\n    private renormaliseModelValues;\n    private onChangeOptions;\n    private applyOptions;\n    private applyStepsArrayOptions;\n    private applyFloorCeilOptions;\n    private resetSlider;\n    private focusPointer;\n    private refocusPointerIfNeeded;\n    private manageElementsStyle;\n    private manageEventsBindings;\n    private updateDisabledState;\n    private updateVerticalState;\n    private updateScale;\n    private getAllSliderElements;\n    private initHandles;\n    private addAccessibility;\n    private updateAriaAttributes;\n    private calculateViewDimensions;\n    private calculateViewDimensionsAndDetectChanges;\n    private updateTicksScale;\n    private getTicksArray;\n    private isTickSelected;\n    private updateFloorLabel;\n    private updateCeilLabel;\n    private updateHandles;\n    private getHandleLabelPos;\n    private updateLowHandle;\n    private updateHighHandle;\n    private updateFloorAndCeilLabelsVisibility;\n    private isLabelBelowFloorLabel;\n    private isLabelAboveCeilLabel;\n    private updateSelectionBar;\n    private getSelectionBarColor;\n    private getPointerColor;\n    private getTickColor;\n    private updateCombinedLabel;\n    private getDisplayValue;\n    private roundStep;\n    private valueToPosition;\n    private positionToValue;\n    private getEventXY;\n    private getEventPosition;\n    private getNearestHandle;\n    private bindEvents;\n    private unbindEvents;\n    private onBarStart;\n    private onStart;\n    private onMove;\n    private onEnd;\n    private onPointerFocus;\n    private onKeyUp;\n    private onPointerBlur;\n    private getKeyActions;\n    private onKeyboardEvent;\n    private onDragStart;\n    /** Get min value depending on whether the newPos is outOfBounds above or below the bar and rightToLeft */\n    private getMinValue;\n    /** Get max value depending on whether the newPos is outOfBounds above or below the bar and rightToLeft */\n    private getMaxValue;\n    private onDragMove;\n    private positionTrackingBar;\n    private positionTrackingHandle;\n    private applyMinMaxLimit;\n    private applyMinMaxRange;\n    private applyPushRange;\n    private getChangeContext;\n}\n"]}