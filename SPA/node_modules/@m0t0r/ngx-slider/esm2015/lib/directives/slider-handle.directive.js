/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/slider-handle.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Renderer2, HostBinding } from '@angular/core';
import { SliderElementDirective } from './slider-element.directive';
export class SliderHandleDirective extends SliderElementDirective {
    /**
     * @param {?} elemRef
     * @param {?} renderer
     */
    constructor(elemRef, renderer) {
        super(elemRef, renderer);
        this.active = false;
        this.role = '';
        this.tabindex = '';
        this.ariaOrientation = '';
        this.ariaLabel = '';
        this.ariaLabelledBy = '';
        this.ariaValueNow = '';
        this.ariaValueText = '';
        this.ariaValueMin = '';
        this.ariaValueMax = '';
    }
    /**
     * @return {?}
     */
    focus() {
        this.elemRef.nativeElement.focus();
    }
}
SliderHandleDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngxSliderHandle]'
            },] }
];
/** @nocollapse */
SliderHandleDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
SliderHandleDirective.propDecorators = {
    active: [{ type: HostBinding, args: ['class.ngx-slider-active',] }],
    role: [{ type: HostBinding, args: ['attr.role',] }],
    tabindex: [{ type: HostBinding, args: ['attr.tabindex',] }],
    ariaOrientation: [{ type: HostBinding, args: ['attr.aria-orientation',] }],
    ariaLabel: [{ type: HostBinding, args: ['attr.aria-label',] }],
    ariaLabelledBy: [{ type: HostBinding, args: ['attr.aria-labelledby',] }],
    ariaValueNow: [{ type: HostBinding, args: ['attr.aria-valuenow',] }],
    ariaValueText: [{ type: HostBinding, args: ['attr.aria-valuetext',] }],
    ariaValueMin: [{ type: HostBinding, args: ['attr.aria-valuemin',] }],
    ariaValueMax: [{ type: HostBinding, args: ['attr.aria-valuemax',] }]
};
if (false) {
    /** @type {?} */
    SliderHandleDirective.prototype.active;
    /** @type {?} */
    SliderHandleDirective.prototype.role;
    /** @type {?} */
    SliderHandleDirective.prototype.tabindex;
    /** @type {?} */
    SliderHandleDirective.prototype.ariaOrientation;
    /** @type {?} */
    SliderHandleDirective.prototype.ariaLabel;
    /** @type {?} */
    SliderHandleDirective.prototype.ariaLabelledBy;
    /** @type {?} */
    SliderHandleDirective.prototype.ariaValueNow;
    /** @type {?} */
    SliderHandleDirective.prototype.ariaValueText;
    /** @type {?} */
    SliderHandleDirective.prototype.ariaValueMin;
    /** @type {?} */
    SliderHandleDirective.prototype.ariaValueMax;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2xpZGVyLWhhbmRsZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbTB0MHIvbmd4LXNsaWRlci8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL3NsaWRlci1oYW5kbGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUtwRSxNQUFNLE9BQU8scUJBQXNCLFNBQVEsc0JBQXNCOzs7OztJQW1DL0QsWUFBWSxPQUFtQixFQUFFLFFBQW1CO1FBQ2xELEtBQUssQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFsQzNCLFdBQU0sR0FBRyxLQUFLLENBQUM7UUFHZixTQUFJLEdBQUcsRUFBRSxDQUFDO1FBR1YsYUFBUSxHQUFHLEVBQUUsQ0FBQztRQUdkLG9CQUFlLEdBQUcsRUFBRSxDQUFDO1FBR3JCLGNBQVMsR0FBRyxFQUFFLENBQUM7UUFHZixtQkFBYyxHQUFHLEVBQUUsQ0FBQztRQUdwQixpQkFBWSxHQUFHLEVBQUUsQ0FBQztRQUdsQixrQkFBYSxHQUFHLEVBQUUsQ0FBQztRQUduQixpQkFBWSxHQUFHLEVBQUUsQ0FBQztRQUdsQixpQkFBWSxHQUFHLEVBQUUsQ0FBQztJQVFsQixDQUFDOzs7O0lBTkQsS0FBSztRQUNILElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3JDLENBQUM7OztZQXBDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLG1CQUFtQjthQUM5Qjs7OztZQUxtQixVQUFVO1lBQUUsU0FBUzs7O3FCQU90QyxXQUFXLFNBQUMseUJBQXlCO21CQUdyQyxXQUFXLFNBQUMsV0FBVzt1QkFHdkIsV0FBVyxTQUFDLGVBQWU7OEJBRzNCLFdBQVcsU0FBQyx1QkFBdUI7d0JBR25DLFdBQVcsU0FBQyxpQkFBaUI7NkJBRzdCLFdBQVcsU0FBQyxzQkFBc0I7MkJBR2xDLFdBQVcsU0FBQyxvQkFBb0I7NEJBR2hDLFdBQVcsU0FBQyxxQkFBcUI7MkJBR2pDLFdBQVcsU0FBQyxvQkFBb0I7MkJBR2hDLFdBQVcsU0FBQyxvQkFBb0I7Ozs7SUEzQmpDLHVDQUNlOztJQUVmLHFDQUNVOztJQUVWLHlDQUNjOztJQUVkLGdEQUNxQjs7SUFFckIsMENBQ2U7O0lBRWYsK0NBQ29COztJQUVwQiw2Q0FDa0I7O0lBRWxCLDhDQUNtQjs7SUFFbkIsNkNBQ2tCOztJQUVsQiw2Q0FDa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIFJlbmRlcmVyMiwgSG9zdEJpbmRpbmcgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFNsaWRlckVsZW1lbnREaXJlY3RpdmUgfSBmcm9tICcuL3NsaWRlci1lbGVtZW50LmRpcmVjdGl2ZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tuZ3hTbGlkZXJIYW5kbGVdJ1xufSlcbmV4cG9ydCBjbGFzcyBTbGlkZXJIYW5kbGVEaXJlY3RpdmUgZXh0ZW5kcyBTbGlkZXJFbGVtZW50RGlyZWN0aXZlIHtcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5uZ3gtc2xpZGVyLWFjdGl2ZScpXG4gIGFjdGl2ZSA9IGZhbHNlO1xuXG4gIEBIb3N0QmluZGluZygnYXR0ci5yb2xlJylcbiAgcm9sZSA9ICcnO1xuXG4gIEBIb3N0QmluZGluZygnYXR0ci50YWJpbmRleCcpXG4gIHRhYmluZGV4ID0gJyc7XG5cbiAgQEhvc3RCaW5kaW5nKCdhdHRyLmFyaWEtb3JpZW50YXRpb24nKVxuICBhcmlhT3JpZW50YXRpb24gPSAnJztcblxuICBASG9zdEJpbmRpbmcoJ2F0dHIuYXJpYS1sYWJlbCcpXG4gIGFyaWFMYWJlbCA9ICcnO1xuXG4gIEBIb3N0QmluZGluZygnYXR0ci5hcmlhLWxhYmVsbGVkYnknKVxuICBhcmlhTGFiZWxsZWRCeSA9ICcnO1xuXG4gIEBIb3N0QmluZGluZygnYXR0ci5hcmlhLXZhbHVlbm93JylcbiAgYXJpYVZhbHVlTm93ID0gJyc7XG5cbiAgQEhvc3RCaW5kaW5nKCdhdHRyLmFyaWEtdmFsdWV0ZXh0JylcbiAgYXJpYVZhbHVlVGV4dCA9ICcnO1xuXG4gIEBIb3N0QmluZGluZygnYXR0ci5hcmlhLXZhbHVlbWluJylcbiAgYXJpYVZhbHVlTWluID0gJyc7XG5cbiAgQEhvc3RCaW5kaW5nKCdhdHRyLmFyaWEtdmFsdWVtYXgnKVxuICBhcmlhVmFsdWVNYXggPSAnJztcblxuICBmb2N1cygpOiB2b2lkIHtcbiAgICB0aGlzLmVsZW1SZWYubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuICB9XG5cbiAgY29uc3RydWN0b3IoZWxlbVJlZjogRWxlbWVudFJlZiwgcmVuZGVyZXI6IFJlbmRlcmVyMikge1xuICAgIHN1cGVyKGVsZW1SZWYsIHJlbmRlcmVyKTtcbiAgfVxufVxuIl19